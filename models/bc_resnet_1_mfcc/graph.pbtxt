node {
  name: "data/wav_filename"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ReadFile"
  op: "ReadFile"
  input: "data/wav_filename"
}
node {
  name: "data/DecodeWav"
  op: "DecodeWav"
  input: "data/ReadFile"
  attr {
    key: "desired_channels"
    value {
      i: 1
    }
  }
  attr {
    key: "desired_samples"
    value {
      i: 16000
    }
  }
}
node {
  name: "data/foreground_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/ExpandDims"
  op: "ExpandDims"
  input: "data/DecodeWav"
  input: "data/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/ExpandDims_1"
  op: "ExpandDims"
  input: "data/ExpandDims"
  input: "data/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "data/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/strided_slice"
  op: "StridedSlice"
  input: "data/Shape"
  input: "data/strided_slice/stack"
  input: "data/strided_slice/stack_1"
  input: "data/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/Cast"
  op: "Cast"
  input: "data/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/mul"
  op: "Mul"
  input: "data/Cast"
  input: "data/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Cast_1"
  op: "Cast"
  input: "data/mul"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize/size/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize/size"
  op: "Pack"
  input: "data/Cast_1"
  input: "data/resize/size/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "data/ExpandDims_1"
  input: "data/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape"
  op: "Shape"
  input: "data/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/Shape"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/Rank"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency"
  op: "Identity"
  input: "data/resize/ResizeBilinear"
  input: "^data/resize_image_with_crop_or_pad/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/sub/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Neg"
  op: "Neg"
  input: "data/resize_image_with_crop_or_pad/sub"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/Neg"
  input: "data/resize_image_with_crop_or_pad/floordiv/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv"
  input: "data/resize_image_with_crop_or_pad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/floordiv_1"
  op: "FloorDiv"
  input: "data/resize_image_with_crop_or_pad/sub"
  input: "data/resize_image_with_crop_or_pad/floordiv_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Maximum_1"
  op: "Maximum"
  input: "data/resize_image_with_crop_or_pad/floordiv_1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/Minimum"
  op: "Minimum"
  input: "data/resize_image_with_crop_or_pad/Minimum/x"
  input: "data/resize_image_with_crop_or_pad/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  op: "Greater"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "target_height must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Greater"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  op: "AddV2"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/unstack:1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be >= target + offset."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/control_dependency"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/Assert_2/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/crop_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize/ResizeBilinear"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/Maximum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Shape_3"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_1"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_1"
  input: "data/resize_image_with_crop_or_pad/Minimum"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1/2"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/strided_slice_2"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  op: "Slice"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub/x"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  op: "Sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  op: "StridedSlice"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Shape_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/Const"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "inner 3 dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  op: "Range"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/start"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  op: "All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/range"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\'image\' must be at least three-dimensional."
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y:0) = "
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/All"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_2"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Rank"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert/data_4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "offset_height must be >= 0"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  op: "GreaterEqual"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "height must be <= target - offset"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  op: "Assert"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/GreaterEqual_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/Assert_1/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_greater_equal/Assert/Assert"
  input: "^data/resize_image_with_crop_or_pad/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/crop_to_bounding_box/Slice"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  op: "Pack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/0"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/1"
  input: "data/resize_image_with_crop_or_pad/Maximum_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/sub_1"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/4"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/5"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/6"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack/7"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/stack"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/control_dependency"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/resize_image_with_crop_or_pad/control_dependency_1"
  op: "Identity"
  input: "data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@data/resize_image_with_crop_or_pad/pad_to_bounding_box/Pad"
      }
    }
  }
}
node {
  name: "data/Squeeze"
  op: "Squeeze"
  input: "data/resize_image_with_crop_or_pad/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 3
      }
    }
  }
}
node {
  name: "data/Mul_1"
  op: "Mul"
  input: "data/Squeeze"
  input: "data/foreground_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/time_shift_padding"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/time_shift_offset"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "data/Pad"
  op: "Pad"
  input: "data/Mul_1"
  input: "data/time_shift_padding"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "data/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200>\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "data/Slice"
  op: "Slice"
  input: "data/Pad"
  input: "data/time_shift_offset"
  input: "data/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/background_data"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16000
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "data/background_volume"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "data/Mul_2"
  op: "Mul"
  input: "data/background_data"
  input: "data/background_volume"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Add"
  op: "AddV2"
  input: "data/Mul_2"
  input: "data/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value/Minimum"
  op: "Minimum"
  input: "data/Add"
  input: "data/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "data/clip_by_value"
  op: "Maximum"
  input: "data/clip_by_value/Minimum"
  input: "data/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "data/Squeeze_1"
  op: "Squeeze"
  input: "data/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "input_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 16000
        }
      }
    }
  }
}
node {
  name: "speech_features/lambda_1/lambda_1/Identity"
  op: "Identity"
  input: "input_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/lambda/lambda/Identity"
  op: "Identity"
  input: "speech_features/lambda_1/lambda_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/lambda_3/lambda_3/Identity"
  op: "Identity"
  input: "speech_features/lambda/lambda/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speech_features/transpose"
  op: "Transpose"
  input: "speech_features/lambda_3/lambda_3/Identity"
  input: "speech_features/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "speech_features/AudioSpectrogram"
  op: "AudioSpectrogram"
  input: "speech_features/transpose"
  attr {
    key: "magnitude_squared"
    value {
      b: true
    }
  }
  attr {
    key: "stride"
    value {
      i: 160
    }
  }
  attr {
    key: "window_size"
    value {
      i: 480
    }
  }
}
node {
  name: "speech_features/Mfcc/sample_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16000
      }
    }
  }
}
node {
  name: "speech_features/Mfcc"
  op: "Mfcc"
  input: "speech_features/AudioSpectrogram"
  input: "speech_features/Mfcc/sample_rate"
  attr {
    key: "dct_coefficient_count"
    value {
      i: 40
    }
  }
  attr {
    key: "filterbank_channel_count"
    value {
      i: 40
    }
  }
  attr {
    key: "lower_frequency_limit"
    value {
      f: 125.0
    }
  }
  attr {
    key: "upper_frequency_limit"
    value {
      f: 7500.0
    }
  }
}
node {
  name: "speech_features/normalizer/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "speech_features/normalizer/sub"
  op: "Sub"
  input: "speech_features/Mfcc"
  input: "speech_features/normalizer/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "speech_features/normalizer/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "speech_features/normalizer/truediv"
  op: "RealDiv"
  input: "speech_features/normalizer/sub"
  input: "speech_features/normalizer/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "speech_features/normalizer/truediv"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^ExpandDims/dim"
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.11881770193576813
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.11881770193576813
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\276G\037\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/kernel"
    }
  }
}
node {
  name: "conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
}
node {
  name: "conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/bias"
    }
  }
}
node {
  name: "conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
}
node {
  name: "conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "conv2d/bias/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "ExpandDims"
  input: "conv2d/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/BiasAdd"
  op: "BiasAdd"
  input: "conv2d/Conv2D"
  input: "conv2d/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\254?\2634\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_1/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/conv2d_1/kernel"
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/conv2d_1/kernel"
}
node {
  name: "transition_block/conv2d_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block/conv2d_1/kernel"
  input: "transition_block/conv2d_1/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/conv2d_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_1/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/conv2d_1/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_1/Conv2D"
  op: "Conv2D"
  input: "conv2d/BiasAdd"
  input: "transition_block/conv2d_1/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization/gamma"
    }
  }
}
node {
  name: "transition_block/batch_normalization/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/gamma"
}
node {
  name: "transition_block/batch_normalization/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization/gamma"
  input: "transition_block/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization/beta"
    }
  }
}
node {
  name: "transition_block/batch_normalization/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/beta"
}
node {
  name: "transition_block/batch_normalization/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization/beta"
  input: "transition_block/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization/moving_mean"
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/moving_mean"
}
node {
  name: "transition_block/batch_normalization/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization/moving_mean"
  input: "transition_block/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization/moving_variance"
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/moving_variance"
}
node {
  name: "transition_block/batch_normalization/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization/moving_variance"
  input: "transition_block/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "keras_learning_phase/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "keras_learning_phase"
  op: "PlaceholderWithDefault"
  input: "keras_learning_phase/input"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block/batch_normalization/gamma"
  input: "transition_block/batch_normalization/beta"
  input: "transition_block/batch_normalization/moving_mean"
  input: "transition_block/batch_normalization/moving_variance"
  input: "transition_block/conv2d_1/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_batch_normalization_cond_false_278"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_batch_normalization_cond_true_277"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity"
  op: "Identity"
  input: "transition_block/batch_normalization/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_1"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_2"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_3"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_4"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_5"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_6"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_7"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_8"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond/Identity_9"
  op: "Identity"
  input: "transition_block/batch_normalization/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_batch_normalization_cond_1_false_346"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_batch_normalization_cond_1_true_345"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/cond_1/Identity"
  op: "Identity"
  input: "transition_block/batch_normalization/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block/batch_normalization/AssignMovingAvg/sub/x"
  input: "transition_block/batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block/batch_normalization/AssignMovingAvg/ReadVariableOp"
  input: "transition_block/batch_normalization/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block/batch_normalization/AssignMovingAvg/sub_1"
  input: "transition_block/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/batch_normalization/moving_mean"
  input: "transition_block/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_mean"
  input: "^transition_block/batch_normalization/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "transition_block/batch_normalization/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block/batch_normalization/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block/batch_normalization/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "transition_block/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/batch_normalization/moving_variance"
  input: "transition_block/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization/moving_variance"
  input: "^transition_block/batch_normalization/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/Relu"
  op: "Relu"
  input: "transition_block/batch_normalization/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\344\351\221\033\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/depthwise_conv2d/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/depthwise_conv2d/depthwise_kernel"
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block/depthwise_conv2d/depthwise_kernel"
  input: "transition_block/depthwise_conv2d/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/depthwise_conv2d/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/depthwise_conv2d/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block/Relu"
  input: "transition_block/depthwise_conv2d/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\024\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/strided_slice"
  op: "StridedSlice"
  input: "transition_block/sub_spectral_normalization/reshape/Shape"
  input: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack"
  input: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack_1"
  input: "transition_block/sub_spectral_normalization/reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Reshape/shape"
  op: "Pack"
  input: "transition_block/sub_spectral_normalization/reshape/strided_slice"
  input: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/1"
  input: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/2"
  input: "transition_block/sub_spectral_normalization/reshape/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape/Reshape"
  op: "Reshape"
  input: "transition_block/depthwise_conv2d/depthwise"
  input: "transition_block/sub_spectral_normalization/reshape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  input: "transition_block/sub_spectral_normalization/reshape/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_false_411"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 4
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_true_410"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_1"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_2"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_3"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_4"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_5"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_6"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_7"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_8"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_9"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_1_false_479"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_1_true_478"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/cond_1/Identity"
  op: "Identity"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub/x"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub_1"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub/x"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub_1"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\004\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/strided_slice"
  op: "StridedSlice"
  input: "transition_block/sub_spectral_normalization/reshape_1/Shape"
  input: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack"
  input: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack_1"
  input: "transition_block/sub_spectral_normalization/reshape_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape"
  op: "Pack"
  input: "transition_block/sub_spectral_normalization/reshape_1/strided_slice"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/1"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/2"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block/sub_spectral_normalization/reshape_1/Reshape"
  op: "Reshape"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/cond/Identity"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transition_block/Mean"
  op: "Mean"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape"
  input: "transition_block/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003{\341\027\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/depthwise_conv2d_1/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/depthwise_conv2d_1/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel"
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/depthwise_conv2d_1/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block/Mean"
  input: "transition_block/depthwise_conv2d_1/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization_1/gamma"
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/gamma"
}
node {
  name: "transition_block/batch_normalization_1/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization_1/gamma"
  input: "transition_block/batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization_1/beta"
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/beta"
}
node {
  name: "transition_block/batch_normalization_1/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization_1/beta"
  input: "transition_block/batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization_1/moving_mean"
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/moving_mean"
}
node {
  name: "transition_block/batch_normalization_1/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization_1/moving_mean"
  input: "transition_block/batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/batch_normalization_1/moving_variance"
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/moving_variance"
}
node {
  name: "transition_block/batch_normalization_1/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block/batch_normalization_1/moving_variance"
  input: "transition_block/batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block/batch_normalization_1/gamma"
  input: "transition_block/batch_normalization_1/beta"
  input: "transition_block/batch_normalization_1/moving_mean"
  input: "transition_block/batch_normalization_1/moving_variance"
  input: "transition_block/depthwise_conv2d_1/depthwise"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_batch_normalization_1_cond_false_545"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_batch_normalization_1_cond_true_544"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_1"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_2"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_3"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_4"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_5"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_6"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_7"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_8"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond/Identity_9"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_batch_normalization_1_cond_1_false_613"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_batch_normalization_1_cond_1_true_612"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/cond_1/Identity"
  op: "Identity"
  input: "transition_block/batch_normalization_1/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block/batch_normalization_1/AssignMovingAvg/sub/x"
  input: "transition_block/batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block/batch_normalization_1/AssignMovingAvg/ReadVariableOp"
  input: "transition_block/batch_normalization_1/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block/batch_normalization_1/AssignMovingAvg/sub_1"
  input: "transition_block/batch_normalization_1/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/batch_normalization_1/moving_mean"
  input: "transition_block/batch_normalization_1/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_mean"
  input: "^transition_block/batch_normalization_1/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub/x"
  input: "transition_block/batch_normalization_1/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block/batch_normalization_1/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block/batch_normalization_1/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub_1"
  input: "transition_block/batch_normalization_1/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block/batch_normalization_1/moving_variance"
  input: "transition_block/batch_normalization_1/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/batch_normalization_1/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block/batch_normalization_1/moving_variance"
  input: "^transition_block/batch_normalization_1/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block/mul"
  op: "Mul"
  input: "transition_block/beta"
  input: "transition_block/batch_normalization_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/Sigmoid"
  op: "Sigmoid"
  input: "transition_block/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/mul_1"
  op: "Mul"
  input: "transition_block/batch_normalization_1/cond/Identity"
  input: "transition_block/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/Identity"
  op: "Identity"
  input: "transition_block/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/IdentityN"
  op: "IdentityN"
  input: "transition_block/mul_1"
  input: "transition_block/batch_normalization_1/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-633"
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\254\272w$\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block/conv2d_2/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block/conv2d_2/kernel"
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block/conv2d_2/kernel"
}
node {
  name: "transition_block/conv2d_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block/conv2d_2/kernel"
  input: "transition_block/conv2d_2/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block/conv2d_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_2/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block/conv2d_2/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/conv2d_2/Conv2D"
  op: "Conv2D"
  input: "transition_block/IdentityN"
  input: "transition_block/conv2d_2/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block/conv2d_2/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_spatial_dropout2d_cond_false_657"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_spatial_dropout2d_cond_true_656"
      }
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_1"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_2"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_3"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_4"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_5"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_6"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_7"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_8"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_9"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_10"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_11"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_12"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_13"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_14"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_15"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_16"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_17"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/spatial_dropout2d/cond/Identity_18"
  op: "Identity"
  input: "transition_block/spatial_dropout2d/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block/add"
  op: "AddV2"
  input: "transition_block/spatial_dropout2d/cond/Identity"
  input: "transition_block/sub_spectral_normalization/reshape_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block/Relu_1"
  op: "Relu"
  input: "transition_block/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "H\244\213)\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_2/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/depthwise_conv2d_2/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel"
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_2/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block/Relu_1"
  input: "normal_block/depthwise_conv2d_2/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\024\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice"
  op: "StridedSlice"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Shape"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack_1"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape"
  op: "Pack"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/strided_slice"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/1"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/2"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape"
  op: "Reshape"
  input: "normal_block/depthwise_conv2d_2/depthwise"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  input: "normal_block/sub_spectral_normalization_1/reshape_2/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_false_803"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 4
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_true_802"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_1"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_2"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_3"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_4"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_5"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_6"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_7"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_8"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_9"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_1_false_871"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_1_true_870"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond_1/Identity"
  op: "Identity"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub/x"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub_1"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub/x"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub_1"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\004\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice"
  op: "StridedSlice"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Shape"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack_1"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape"
  op: "Pack"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/strided_slice"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/1"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/2"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape"
  op: "Reshape"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/cond/Identity"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block/Mean"
  op: "Mean"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape"
  input: "normal_block/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\226\221t\021\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/depthwise_conv2d_3/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/depthwise_conv2d_3/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel"
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/depthwise_conv2d_3/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block/Mean"
  input: "normal_block/depthwise_conv2d_3/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/batch_normalization_3/gamma"
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/gamma"
}
node {
  name: "normal_block/batch_normalization_3/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block/batch_normalization_3/gamma"
  input: "normal_block/batch_normalization_3/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/batch_normalization_3/beta"
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/beta"
}
node {
  name: "normal_block/batch_normalization_3/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block/batch_normalization_3/beta"
  input: "normal_block/batch_normalization_3/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/batch_normalization_3/moving_mean"
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/moving_mean"
}
node {
  name: "normal_block/batch_normalization_3/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block/batch_normalization_3/moving_mean"
  input: "normal_block/batch_normalization_3/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/batch_normalization_3/moving_variance"
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/moving_variance"
}
node {
  name: "normal_block/batch_normalization_3/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block/batch_normalization_3/moving_variance"
  input: "normal_block/batch_normalization_3/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block/batch_normalization_3/gamma"
  input: "normal_block/batch_normalization_3/beta"
  input: "normal_block/batch_normalization_3/moving_mean"
  input: "normal_block/batch_normalization_3/moving_variance"
  input: "normal_block/depthwise_conv2d_3/depthwise"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_batch_normalization_3_cond_false_937"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_batch_normalization_3_cond_true_936"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_1"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_2"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_3"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_4"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_5"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_6"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_7"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_8"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond/Identity_9"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_batch_normalization_3_cond_1_false_1005"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_batch_normalization_3_cond_1_true_1004"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/cond_1/Identity"
  op: "Identity"
  input: "normal_block/batch_normalization_3/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block/batch_normalization_3/AssignMovingAvg/sub/x"
  input: "normal_block/batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block/batch_normalization_3/AssignMovingAvg/ReadVariableOp"
  input: "normal_block/batch_normalization_3/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block/batch_normalization_3/AssignMovingAvg/sub_1"
  input: "normal_block/batch_normalization_3/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block/batch_normalization_3/moving_mean"
  input: "normal_block/batch_normalization_3/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_mean"
  input: "^normal_block/batch_normalization_3/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub/x"
  input: "normal_block/batch_normalization_3/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block/batch_normalization_3/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block/batch_normalization_3/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub_1"
  input: "normal_block/batch_normalization_3/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block/batch_normalization_3/moving_variance"
  input: "normal_block/batch_normalization_3/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/batch_normalization_3/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block/batch_normalization_3/moving_variance"
  input: "^normal_block/batch_normalization_3/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/batch_normalization_3/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block/mul"
  op: "Mul"
  input: "normal_block/beta"
  input: "normal_block/batch_normalization_3/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/Sigmoid"
  op: "Sigmoid"
  input: "normal_block/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/mul_1"
  op: "Mul"
  input: "normal_block/batch_normalization_3/cond/Identity"
  input: "normal_block/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/Identity"
  op: "Identity"
  input: "normal_block/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/IdentityN"
  op: "IdentityN"
  input: "normal_block/mul_1"
  input: "normal_block/batch_normalization_3/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-1025"
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\034{:\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block/conv2d_3/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block/conv2d_3/kernel"
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/conv2d_3/kernel"
}
node {
  name: "normal_block/conv2d_3/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block/conv2d_3/kernel"
  input: "normal_block/conv2d_3/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block/conv2d_3/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/conv2d_3/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block/conv2d_3/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/conv2d_3/Conv2D"
  op: "Conv2D"
  input: "normal_block/IdentityN"
  input: "normal_block/conv2d_3/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block/conv2d_3/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_spatial_dropout2d_1_cond_false_1049"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_spatial_dropout2d_1_cond_true_1048"
      }
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_1"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_2"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_3"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_4"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_5"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_6"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_7"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_8"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_9"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_10"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_11"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_12"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_13"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_14"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_15"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_16"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_17"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/spatial_dropout2d_1/cond/Identity_18"
  op: "Identity"
  input: "normal_block/spatial_dropout2d_1/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block/add"
  op: "AddV2"
  input: "normal_block/spatial_dropout2d_1/cond/Identity"
  input: "transition_block/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/add_1"
  op: "AddV2"
  input: "normal_block/add"
  input: "normal_block/sub_spectral_normalization_1/reshape_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block/Relu"
  op: "Relu"
  input: "normal_block/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "i\007\0233\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_4/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_4/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block/Relu"
  input: "normal_block_1/depthwise_conv2d_4/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\024\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice"
  op: "StridedSlice"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Shape"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack_1"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape"
  op: "Pack"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/strided_slice"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/1"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/2"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape"
  op: "Reshape"
  input: "normal_block_1/depthwise_conv2d_4/depthwise"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_4/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_false_1196"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 4
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_true_1195"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_1"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_2"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_3"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_4"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_5"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_6"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_7"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_8"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_9"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_1_false_1264"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_1_true_1263"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond_1/Identity"
  op: "Identity"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub/x"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub_1"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub/x"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub_1"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\004\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice"
  op: "StridedSlice"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Shape"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack_1"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape"
  op: "Pack"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/strided_slice"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/1"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/2"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape"
  op: "Reshape"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/cond/Identity"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_1/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_1/Mean"
  op: "Mean"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape"
  input: "normal_block_1/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "0\364\330\'\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/depthwise_conv2d_5/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/depthwise_conv2d_5/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_1/Mean"
  input: "normal_block_1/depthwise_conv2d_5/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/batch_normalization_5/gamma"
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/gamma"
}
node {
  name: "normal_block_1/batch_normalization_5/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/batch_normalization_5/gamma"
  input: "normal_block_1/batch_normalization_5/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/batch_normalization_5/beta"
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/beta"
}
node {
  name: "normal_block_1/batch_normalization_5/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/batch_normalization_5/beta"
  input: "normal_block_1/batch_normalization_5/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/batch_normalization_5/moving_mean"
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
}
node {
  name: "normal_block_1/batch_normalization_5/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  input: "normal_block_1/batch_normalization_5/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/batch_normalization_5/moving_variance"
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
}
node {
  name: "normal_block_1/batch_normalization_5/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  input: "normal_block_1/batch_normalization_5/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_1/batch_normalization_5/gamma"
  input: "normal_block_1/batch_normalization_5/beta"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  input: "normal_block_1/depthwise_conv2d_5/depthwise"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_1_batch_normalization_5_cond_false_1330"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_1_batch_normalization_5_cond_true_1329"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_1"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_2"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_3"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_4"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_5"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_6"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_7"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_8"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond/Identity_9"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_1_batch_normalization_5_cond_1_false_1398"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_1_batch_normalization_5_cond_1_true_1397"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/cond_1/Identity"
  op: "Identity"
  input: "normal_block_1/batch_normalization_5/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub/x"
  input: "normal_block_1/batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub_1"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
  input: "^normal_block_1/batch_normalization_5/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub/x"
  input: "normal_block_1/batch_normalization_5/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub_1"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  input: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/batch_normalization_5/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
  input: "^normal_block_1/batch_normalization_5/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/batch_normalization_5/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_1/mul"
  op: "Mul"
  input: "normal_block_1/beta"
  input: "normal_block_1/batch_normalization_5/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/mul_1"
  op: "Mul"
  input: "normal_block_1/batch_normalization_5/cond/Identity"
  input: "normal_block_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/Identity"
  op: "Identity"
  input: "normal_block_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/IdentityN"
  op: "IdentityN"
  input: "normal_block_1/mul_1"
  input: "normal_block_1/batch_normalization_5/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-1418"
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6123724579811096
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6123724579811096
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\0024\350.\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_1/conv2d_4/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_1/conv2d_4/kernel"
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_1/conv2d_4/kernel"
}
node {
  name: "normal_block_1/conv2d_4/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_1/conv2d_4/kernel"
  input: "normal_block_1/conv2d_4/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/conv2d_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_1/conv2d_4/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/conv2d_4/Conv2D"
  op: "Conv2D"
  input: "normal_block_1/IdentityN"
  input: "normal_block_1/conv2d_4/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_1/conv2d_4/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_1_spatial_dropout2d_2_cond_false_1442"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_1_spatial_dropout2d_2_cond_true_1441"
      }
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_1"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_2"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_3"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_4"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_5"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_6"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_7"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_8"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_9"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_10"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_11"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_12"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_13"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_14"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_15"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_16"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_17"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/spatial_dropout2d_2/cond/Identity_18"
  op: "Identity"
  input: "normal_block_1/spatial_dropout2d_2/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_1/add"
  op: "AddV2"
  input: "normal_block_1/spatial_dropout2d_2/cond/Identity"
  input: "normal_block/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/add_1"
  op: "AddV2"
  input: "normal_block_1/add"
  input: "normal_block_1/sub_spectral_normalization_2/reshape_5/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_1/Relu"
  op: "Relu"
  input: "normal_block_1/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\010\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\306E\254\020\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_5/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 8
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/conv2d_5/kernel"
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/conv2d_5/kernel"
}
node {
  name: "transition_block_1/conv2d_5/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/conv2d_5/kernel"
  input: "transition_block_1/conv2d_5/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/conv2d_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/conv2d_5/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_5/Conv2D"
  op: "Conv2D"
  input: "normal_block_1/Relu"
  input: "transition_block_1/conv2d_5/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_7/gamma"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/gamma"
}
node {
  name: "transition_block_1/batch_normalization_7/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_7/gamma"
  input: "transition_block_1/batch_normalization_7/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_7/beta"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/beta"
}
node {
  name: "transition_block_1/batch_normalization_7/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_7/beta"
  input: "transition_block_1/batch_normalization_7/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_7/moving_mean"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
}
node {
  name: "transition_block_1/batch_normalization_7/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  input: "transition_block_1/batch_normalization_7/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_7/moving_variance"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
}
node {
  name: "transition_block_1/batch_normalization_7/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  input: "transition_block_1/batch_normalization_7/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_1/batch_normalization_7/gamma"
  input: "transition_block_1/batch_normalization_7/beta"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  input: "transition_block_1/conv2d_5/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_7_cond_false_1577"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 10
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_7_cond_true_1576"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_1"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_2"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_3"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_4"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_5"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_6"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_7"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_8"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond/Identity_9"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_7_cond_1_false_1645"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_7_cond_1_true_1644"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/cond_1/Identity"
  op: "Identity"
  input: "transition_block_1/batch_normalization_7/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub/x"
  input: "transition_block_1/batch_normalization_7/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub_1"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
  input: "^transition_block_1/batch_normalization_7/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub/x"
  input: "transition_block_1/batch_normalization_7/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub_1"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  input: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_7/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
  input: "^transition_block_1/batch_normalization_7/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_7/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/Relu"
  op: "Relu"
  input: "transition_block_1/batch_normalization_7/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\215\224\235-\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_6/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_1/Relu"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/SpaceToBatchND"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_1/depthwise_conv2d_6/depthwise"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\n\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice"
  op: "StridedSlice"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Shape"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack_1"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape"
  op: "Pack"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/strided_slice"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/1"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/2"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape"
  op: "Reshape"
  input: "transition_block_1/depthwise_conv2d_6/depthwise/BatchToSpaceND"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_6/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_false_1720"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 2
          }
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_true_1719"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_1"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_2"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_3"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_4"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_5"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_6"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_7"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_8"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_9"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_1_false_1788"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_1_true_1787"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond_1/Identity"
  op: "Identity"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub/x"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub_1"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub/x"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub_1"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\002\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice"
  op: "StridedSlice"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Shape"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack_1"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape"
  op: "Pack"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/strided_slice"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/1"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/2"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape"
  op: "Reshape"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/cond/Identity"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transition_block_1/Mean"
  op: "Mean"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape"
  input: "transition_block_1/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ".\232\224\016\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/depthwise_conv2d_7/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_1/Mean"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/SpaceToBatchND"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_1/depthwise_conv2d_7/depthwise"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_8/gamma"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/gamma"
}
node {
  name: "transition_block_1/batch_normalization_8/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_8/gamma"
  input: "transition_block_1/batch_normalization_8/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_8/beta"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/beta"
}
node {
  name: "transition_block_1/batch_normalization_8/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_8/beta"
  input: "transition_block_1/batch_normalization_8/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_8/moving_mean"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
}
node {
  name: "transition_block_1/batch_normalization_8/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  input: "transition_block_1/batch_normalization_8/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/batch_normalization_8/moving_variance"
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
}
node {
  name: "transition_block_1/batch_normalization_8/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  input: "transition_block_1/batch_normalization_8/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_1/batch_normalization_8/gamma"
  input: "transition_block_1/batch_normalization_8/beta"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  input: "transition_block_1/depthwise_conv2d_7/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_8_cond_false_1864"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_8_cond_true_1863"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_1"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_2"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_3"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_4"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_5"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_6"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_7"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_8"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond/Identity_9"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_8_cond_1_false_1932"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_batch_normalization_8_cond_1_true_1931"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/cond_1/Identity"
  op: "Identity"
  input: "transition_block_1/batch_normalization_8/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub/x"
  input: "transition_block_1/batch_normalization_8/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub_1"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
  input: "^transition_block_1/batch_normalization_8/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub/x"
  input: "transition_block_1/batch_normalization_8/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub_1"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  input: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/batch_normalization_8/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
  input: "^transition_block_1/batch_normalization_8/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/batch_normalization_8/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_1/mul"
  op: "Mul"
  input: "transition_block_1/beta"
  input: "transition_block_1/batch_normalization_8/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/Sigmoid"
  op: "Sigmoid"
  input: "transition_block_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/mul_1"
  op: "Mul"
  input: "transition_block_1/batch_normalization_8/cond/Identity"
  input: "transition_block_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/Identity"
  op: "Identity"
  input: "transition_block_1/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/IdentityN"
  op: "IdentityN"
  input: "transition_block_1/mul_1"
  input: "transition_block_1/batch_normalization_8/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-1952"
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\014\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "![D\014\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_1/conv2d_6/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_1/conv2d_6/kernel"
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_1/conv2d_6/kernel"
}
node {
  name: "transition_block_1/conv2d_6/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_1/conv2d_6/kernel"
  input: "transition_block_1/conv2d_6/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/conv2d_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_1/conv2d_6/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/conv2d_6/Conv2D"
  op: "Conv2D"
  input: "transition_block_1/IdentityN"
  input: "transition_block_1/conv2d_6/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_1/conv2d_6/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_1_spatial_dropout2d_3_cond_false_1976"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_1_spatial_dropout2d_3_cond_true_1975"
      }
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_1"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_2"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_3"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_4"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_5"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_6"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_7"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_8"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_9"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_10"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_11"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_12"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_13"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_14"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_15"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_16"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_17"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/spatial_dropout2d_3/cond/Identity_18"
  op: "Identity"
  input: "transition_block_1/spatial_dropout2d_3/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_1/add"
  op: "AddV2"
  input: "transition_block_1/spatial_dropout2d_3/cond/Identity"
  input: "transition_block_1/sub_spectral_normalization_3/reshape_7/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_1/Relu_1"
  op: "Relu"
  input: "transition_block_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\314\232\312\'\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_8/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_1/Relu_1"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/SpaceToBatchND"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_2/depthwise_conv2d_8/depthwise"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\n\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice"
  op: "StridedSlice"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Shape"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack_1"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape"
  op: "Pack"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/strided_slice"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/1"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/2"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape"
  op: "Reshape"
  input: "normal_block_2/depthwise_conv2d_8/depthwise/BatchToSpaceND"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_8/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_false_2132"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 2
          }
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_true_2131"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_1"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_2"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_3"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_4"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_5"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_6"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_7"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_8"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_9"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_1_false_2200"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_1_true_2199"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond_1/Identity"
  op: "Identity"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub/x"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub_1"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub/x"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub_1"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\002\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice"
  op: "StridedSlice"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Shape"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack_1"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape"
  op: "Pack"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/strided_slice"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/1"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/2"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape"
  op: "Reshape"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/cond/Identity"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_2/Mean"
  op: "Mean"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape"
  input: "normal_block_2/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024m%\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/depthwise_conv2d_9/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_2/Mean"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/SpaceToBatchND"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_2/depthwise_conv2d_9/depthwise"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/batch_normalization_10/gamma"
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/gamma"
}
node {
  name: "normal_block_2/batch_normalization_10/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/batch_normalization_10/gamma"
  input: "normal_block_2/batch_normalization_10/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/batch_normalization_10/beta"
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/beta"
}
node {
  name: "normal_block_2/batch_normalization_10/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/batch_normalization_10/beta"
  input: "normal_block_2/batch_normalization_10/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/batch_normalization_10/moving_mean"
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
}
node {
  name: "normal_block_2/batch_normalization_10/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  input: "normal_block_2/batch_normalization_10/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/batch_normalization_10/moving_variance"
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
}
node {
  name: "normal_block_2/batch_normalization_10/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  input: "normal_block_2/batch_normalization_10/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_2/batch_normalization_10/gamma"
  input: "normal_block_2/batch_normalization_10/beta"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  input: "normal_block_2/depthwise_conv2d_9/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_2_batch_normalization_10_cond_false_2276"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_2_batch_normalization_10_cond_true_2275"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_1"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_2"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_3"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_4"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_5"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_6"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_7"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_8"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond/Identity_9"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_2_batch_normalization_10_cond_1_false_2344"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_2_batch_normalization_10_cond_1_true_2343"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/cond_1/Identity"
  op: "Identity"
  input: "normal_block_2/batch_normalization_10/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub/x"
  input: "normal_block_2/batch_normalization_10/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub_1"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
  input: "^normal_block_2/batch_normalization_10/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub/x"
  input: "normal_block_2/batch_normalization_10/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub_1"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  input: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/batch_normalization_10/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
  input: "^normal_block_2/batch_normalization_10/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/batch_normalization_10/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_2/mul"
  op: "Mul"
  input: "normal_block_2/beta"
  input: "normal_block_2/batch_normalization_10/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/mul_1"
  op: "Mul"
  input: "normal_block_2/batch_normalization_10/cond/Identity"
  input: "normal_block_2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/Identity"
  op: "Identity"
  input: "normal_block_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/IdentityN"
  op: "IdentityN"
  input: "normal_block_2/mul_1"
  input: "normal_block_2/batch_normalization_10/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-2364"
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\014\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "7\265)\'\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_2/conv2d_7/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_2/conv2d_7/kernel"
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_2/conv2d_7/kernel"
}
node {
  name: "normal_block_2/conv2d_7/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_2/conv2d_7/kernel"
  input: "normal_block_2/conv2d_7/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/conv2d_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_2/conv2d_7/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/conv2d_7/Conv2D"
  op: "Conv2D"
  input: "normal_block_2/IdentityN"
  input: "normal_block_2/conv2d_7/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_2/conv2d_7/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_2_spatial_dropout2d_4_cond_false_2388"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_2_spatial_dropout2d_4_cond_true_2387"
      }
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_1"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_2"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_3"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_4"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_5"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_6"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_7"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_8"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_9"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_10"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_11"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_12"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_13"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_14"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_15"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_16"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_17"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/spatial_dropout2d_4/cond/Identity_18"
  op: "Identity"
  input: "normal_block_2/spatial_dropout2d_4/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_2/add"
  op: "AddV2"
  input: "normal_block_2/spatial_dropout2d_4/cond/Identity"
  input: "transition_block_1/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/add_1"
  op: "AddV2"
  input: "normal_block_2/add"
  input: "normal_block_2/sub_spectral_normalization_4/reshape_9/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_2/Relu"
  op: "Relu"
  input: "normal_block_2/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\332K\0078\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_10/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_2/Relu"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/SpaceToBatchND"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_3/depthwise_conv2d_10/depthwise"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\n\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice"
  op: "StridedSlice"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Shape"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack_1"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape"
  op: "Pack"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/strided_slice"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/1"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/2"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape"
  op: "Reshape"
  input: "normal_block_3/depthwise_conv2d_10/depthwise/BatchToSpaceND"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_10/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_false_2545"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 2
          }
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
          dim {
            size: 60
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_true_2544"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_1"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_2"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_3"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_4"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_5"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_6"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_7"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_8"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_9"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_1_false_2613"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_1_true_2612"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond_1/Identity"
  op: "Identity"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub/x"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub_1"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub/x"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub_1"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\002\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice"
  op: "StridedSlice"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Shape"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack_1"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 12
      }
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape"
  op: "Pack"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/strided_slice"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/1"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/2"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape"
  op: "Reshape"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/cond/Identity"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_3/Mean"
  op: "Mean"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape"
  input: "normal_block_3/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "l\373\3214\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/depthwise_conv2d_11/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_3/Mean"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/SpaceToBatchND"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_3/depthwise_conv2d_11/depthwise"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/batch_normalization_12/gamma"
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/gamma"
}
node {
  name: "normal_block_3/batch_normalization_12/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/batch_normalization_12/gamma"
  input: "normal_block_3/batch_normalization_12/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/batch_normalization_12/beta"
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/beta"
}
node {
  name: "normal_block_3/batch_normalization_12/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/batch_normalization_12/beta"
  input: "normal_block_3/batch_normalization_12/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/batch_normalization_12/moving_mean"
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
}
node {
  name: "normal_block_3/batch_normalization_12/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  input: "normal_block_3/batch_normalization_12/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/batch_normalization_12/moving_variance"
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
}
node {
  name: "normal_block_3/batch_normalization_12/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  input: "normal_block_3/batch_normalization_12/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_3/batch_normalization_12/gamma"
  input: "normal_block_3/batch_normalization_12/beta"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  input: "normal_block_3/depthwise_conv2d_11/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_3_batch_normalization_12_cond_false_2689"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_3_batch_normalization_12_cond_true_2688"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_1"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_2"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_3"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_4"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_5"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_6"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_7"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_8"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond/Identity_9"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_3_batch_normalization_12_cond_1_false_2757"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_3_batch_normalization_12_cond_1_true_2756"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/cond_1/Identity"
  op: "Identity"
  input: "normal_block_3/batch_normalization_12/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub/x"
  input: "normal_block_3/batch_normalization_12/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub_1"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
  input: "^normal_block_3/batch_normalization_12/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub/x"
  input: "normal_block_3/batch_normalization_12/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub_1"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  input: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/batch_normalization_12/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
  input: "^normal_block_3/batch_normalization_12/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/batch_normalization_12/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_3/mul"
  op: "Mul"
  input: "normal_block_3/beta"
  input: "normal_block_3/batch_normalization_12/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/mul_1"
  op: "Mul"
  input: "normal_block_3/batch_normalization_12/cond/Identity"
  input: "normal_block_3/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/Identity"
  op: "Identity"
  input: "normal_block_3/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/IdentityN"
  op: "IdentityN"
  input: "normal_block_3/mul_1"
  input: "normal_block_3/batch_normalization_12/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-2777"
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\014\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "X4\304\025\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_3/conv2d_8/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_3/conv2d_8/kernel"
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_3/conv2d_8/kernel"
}
node {
  name: "normal_block_3/conv2d_8/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_3/conv2d_8/kernel"
  input: "normal_block_3/conv2d_8/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/conv2d_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_3/conv2d_8/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/conv2d_8/Conv2D"
  op: "Conv2D"
  input: "normal_block_3/IdentityN"
  input: "normal_block_3/conv2d_8/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_3/conv2d_8/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_3_spatial_dropout2d_5_cond_false_2801"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_3_spatial_dropout2d_5_cond_true_2800"
      }
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_1"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_2"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_3"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_4"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_5"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_6"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_7"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_8"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_9"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_10"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_11"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_12"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_13"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_14"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_15"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_16"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_17"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/spatial_dropout2d_5/cond/Identity_18"
  op: "Identity"
  input: "normal_block_3/spatial_dropout2d_5/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_3/add"
  op: "AddV2"
  input: "normal_block_3/spatial_dropout2d_5/cond/Identity"
  input: "normal_block_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/add_1"
  op: "AddV2"
  input: "normal_block_3/add"
  input: "normal_block_3/sub_spectral_normalization_5/reshape_11/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_3/Relu"
  op: "Relu"
  input: "normal_block_3/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\014\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4629100561141968
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4629100561141968
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d#.\026\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_9/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 12
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/conv2d_9/kernel"
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/conv2d_9/kernel"
}
node {
  name: "transition_block_2/conv2d_9/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/conv2d_9/kernel"
  input: "transition_block_2/conv2d_9/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/conv2d_9/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/conv2d_9/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_9/Conv2D"
  op: "Conv2D"
  input: "normal_block_3/Relu"
  input: "transition_block_2/conv2d_9/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_14/gamma"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/gamma"
}
node {
  name: "transition_block_2/batch_normalization_14/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_14/gamma"
  input: "transition_block_2/batch_normalization_14/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_14/beta"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/beta"
}
node {
  name: "transition_block_2/batch_normalization_14/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_14/beta"
  input: "transition_block_2/batch_normalization_14/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_14/moving_mean"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
}
node {
  name: "transition_block_2/batch_normalization_14/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  input: "transition_block_2/batch_normalization_14/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_14/moving_variance"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
}
node {
  name: "transition_block_2/batch_normalization_14/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  input: "transition_block_2/batch_normalization_14/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_2/batch_normalization_14/gamma"
  input: "transition_block_2/batch_normalization_14/beta"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  input: "transition_block_2/conv2d_9/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_14_cond_false_2936"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_14_cond_true_2935"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_1"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_2"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_3"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_4"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_5"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_6"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_7"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_8"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond/Identity_9"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_14_cond_1_false_3004"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_14_cond_1_true_3003"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/cond_1/Identity"
  op: "Identity"
  input: "transition_block_2/batch_normalization_14/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub/x"
  input: "transition_block_2/batch_normalization_14/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub_1"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
  input: "^transition_block_2/batch_normalization_14/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub/x"
  input: "transition_block_2/batch_normalization_14/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub_1"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  input: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_14/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
  input: "^transition_block_2/batch_normalization_14/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_14/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/Relu"
  op: "Relu"
  input: "transition_block_2/batch_normalization_14/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\336:\250,\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_12/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_2/Relu"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/SpaceToBatchND"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_2/depthwise_conv2d_12/depthwise"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice"
  op: "StridedSlice"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Shape"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack_1"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape"
  op: "Pack"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/strided_slice"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/1"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/2"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape"
  op: "Reshape"
  input: "transition_block_2/depthwise_conv2d_12/depthwise/BatchToSpaceND"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_12/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_false_3079"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_true_3078"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_1"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_2"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_3"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_4"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_5"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_6"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_7"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_8"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_9"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_1_false_3147"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_1_true_3146"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond_1/Identity"
  op: "Identity"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub/x"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub_1"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub/x"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub_1"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice"
  op: "StridedSlice"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Shape"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack_1"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape"
  op: "Pack"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/strided_slice"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/1"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/2"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape"
  op: "Reshape"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/cond/Identity"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transition_block_2/Mean"
  op: "Mean"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape"
  input: "transition_block_2/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\211\033\2218\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/depthwise_conv2d_13/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_2/Mean"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/SpaceToBatchND"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_2/depthwise_conv2d_13/depthwise"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_15/gamma"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/gamma"
}
node {
  name: "transition_block_2/batch_normalization_15/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_15/gamma"
  input: "transition_block_2/batch_normalization_15/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_15/beta"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/beta"
}
node {
  name: "transition_block_2/batch_normalization_15/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_15/beta"
  input: "transition_block_2/batch_normalization_15/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_15/moving_mean"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
}
node {
  name: "transition_block_2/batch_normalization_15/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  input: "transition_block_2/batch_normalization_15/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/batch_normalization_15/moving_variance"
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
}
node {
  name: "transition_block_2/batch_normalization_15/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  input: "transition_block_2/batch_normalization_15/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_2/batch_normalization_15/gamma"
  input: "transition_block_2/batch_normalization_15/beta"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  input: "transition_block_2/depthwise_conv2d_13/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_15_cond_false_3223"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_15_cond_true_3222"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_1"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_2"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_3"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_4"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_5"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_6"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_7"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_8"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond/Identity_9"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_15_cond_1_false_3291"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_batch_normalization_15_cond_1_true_3290"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/cond_1/Identity"
  op: "Identity"
  input: "transition_block_2/batch_normalization_15/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub/x"
  input: "transition_block_2/batch_normalization_15/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub_1"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
  input: "^transition_block_2/batch_normalization_15/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub/x"
  input: "transition_block_2/batch_normalization_15/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub_1"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  input: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/batch_normalization_15/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
  input: "^transition_block_2/batch_normalization_15/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/batch_normalization_15/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_2/mul"
  op: "Mul"
  input: "transition_block_2/beta"
  input: "transition_block_2/batch_normalization_15/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/Sigmoid"
  op: "Sigmoid"
  input: "transition_block_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/mul_1"
  op: "Mul"
  input: "transition_block_2/batch_normalization_15/cond/Identity"
  input: "transition_block_2/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/Identity"
  op: "Identity"
  input: "transition_block_2/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/IdentityN"
  op: "IdentityN"
  input: "transition_block_2/mul_1"
  input: "transition_block_2/batch_normalization_15/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-3311"
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\334\224\236\007\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_2/conv2d_10/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_2/conv2d_10/kernel"
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_2/conv2d_10/kernel"
}
node {
  name: "transition_block_2/conv2d_10/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_2/conv2d_10/kernel"
  input: "transition_block_2/conv2d_10/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/conv2d_10/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_2/conv2d_10/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/conv2d_10/Conv2D"
  op: "Conv2D"
  input: "transition_block_2/IdentityN"
  input: "transition_block_2/conv2d_10/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_2/conv2d_10/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_2_spatial_dropout2d_6_cond_false_3335"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_2_spatial_dropout2d_6_cond_true_3334"
      }
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_1"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_2"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_3"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_4"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_5"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_6"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_7"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_8"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_9"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_10"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_11"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_12"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_13"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_14"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_15"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_16"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_17"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/spatial_dropout2d_6/cond/Identity_18"
  op: "Identity"
  input: "transition_block_2/spatial_dropout2d_6/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_2/add"
  op: "AddV2"
  input: "transition_block_2/spatial_dropout2d_6/cond/Identity"
  input: "transition_block_2/sub_spectral_normalization_6/reshape_13/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_2/Relu_1"
  op: "Relu"
  input: "transition_block_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\342\030\320\004\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_14/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_2/Relu_1"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/SpaceToBatchND"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_4/depthwise_conv2d_14/depthwise"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice"
  op: "StridedSlice"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Shape"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack_1"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape"
  op: "Pack"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/strided_slice"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/1"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/2"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape"
  op: "Reshape"
  input: "normal_block_4/depthwise_conv2d_14/depthwise/BatchToSpaceND"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_14/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_false_3491"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_true_3490"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_1"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_2"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_3"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_4"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_5"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_6"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_7"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_8"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_9"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_1_false_3559"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_1_true_3558"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond_1/Identity"
  op: "Identity"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub/x"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub_1"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub/x"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub_1"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice"
  op: "StridedSlice"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Shape"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack_1"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape"
  op: "Pack"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/strided_slice"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/1"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/2"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape"
  op: "Reshape"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/cond/Identity"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_4/Mean"
  op: "Mean"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape"
  input: "normal_block_4/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\333=\035+\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/depthwise_conv2d_15/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_4/Mean"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/SpaceToBatchND"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_4/depthwise_conv2d_15/depthwise"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/batch_normalization_17/gamma"
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/gamma"
}
node {
  name: "normal_block_4/batch_normalization_17/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/batch_normalization_17/gamma"
  input: "normal_block_4/batch_normalization_17/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/batch_normalization_17/beta"
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/beta"
}
node {
  name: "normal_block_4/batch_normalization_17/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/batch_normalization_17/beta"
  input: "normal_block_4/batch_normalization_17/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/batch_normalization_17/moving_mean"
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
}
node {
  name: "normal_block_4/batch_normalization_17/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  input: "normal_block_4/batch_normalization_17/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/batch_normalization_17/moving_variance"
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
}
node {
  name: "normal_block_4/batch_normalization_17/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  input: "normal_block_4/batch_normalization_17/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_4/batch_normalization_17/gamma"
  input: "normal_block_4/batch_normalization_17/beta"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  input: "normal_block_4/depthwise_conv2d_15/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_4_batch_normalization_17_cond_false_3635"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_4_batch_normalization_17_cond_true_3634"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_1"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_2"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_3"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_4"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_5"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_6"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_7"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_8"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond/Identity_9"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_4_batch_normalization_17_cond_1_false_3703"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_4_batch_normalization_17_cond_1_true_3702"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/cond_1/Identity"
  op: "Identity"
  input: "normal_block_4/batch_normalization_17/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub/x"
  input: "normal_block_4/batch_normalization_17/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub_1"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
  input: "^normal_block_4/batch_normalization_17/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub/x"
  input: "normal_block_4/batch_normalization_17/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub_1"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  input: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/batch_normalization_17/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
  input: "^normal_block_4/batch_normalization_17/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/batch_normalization_17/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_4/mul"
  op: "Mul"
  input: "normal_block_4/beta"
  input: "normal_block_4/batch_normalization_17/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_4/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/mul_1"
  op: "Mul"
  input: "normal_block_4/batch_normalization_17/cond/Identity"
  input: "normal_block_4/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/Identity"
  op: "Identity"
  input: "normal_block_4/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/IdentityN"
  op: "IdentityN"
  input: "normal_block_4/mul_1"
  input: "normal_block_4/batch_normalization_17/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-3723"
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P/\314\024\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_4/conv2d_11/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_4/conv2d_11/kernel"
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_4/conv2d_11/kernel"
}
node {
  name: "normal_block_4/conv2d_11/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_4/conv2d_11/kernel"
  input: "normal_block_4/conv2d_11/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/conv2d_11/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_4/conv2d_11/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/conv2d_11/Conv2D"
  op: "Conv2D"
  input: "normal_block_4/IdentityN"
  input: "normal_block_4/conv2d_11/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_4/conv2d_11/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_4_spatial_dropout2d_7_cond_false_3747"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_4_spatial_dropout2d_7_cond_true_3746"
      }
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_1"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_2"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_3"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_4"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_5"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_6"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_7"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_8"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_9"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_10"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_11"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_12"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_13"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_14"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_15"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_16"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_17"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/spatial_dropout2d_7/cond/Identity_18"
  op: "Identity"
  input: "normal_block_4/spatial_dropout2d_7/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_4/add"
  op: "AddV2"
  input: "normal_block_4/spatial_dropout2d_7/cond/Identity"
  input: "transition_block_2/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/add_1"
  op: "AddV2"
  input: "normal_block_4/add"
  input: "normal_block_4/sub_spectral_normalization_7/reshape_15/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_4/Relu"
  op: "Relu"
  input: "normal_block_4/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\273\250\350\035\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_16/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_4/Relu"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/SpaceToBatchND"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_5/depthwise_conv2d_16/depthwise"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice"
  op: "StridedSlice"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Shape"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack_1"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape"
  op: "Pack"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/strided_slice"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/1"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/2"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape"
  op: "Reshape"
  input: "normal_block_5/depthwise_conv2d_16/depthwise/BatchToSpaceND"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_16/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_false_3904"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_true_3903"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_1"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_2"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_3"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_4"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_5"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_6"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_7"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_8"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_9"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_1_false_3972"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_1_true_3971"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond_1/Identity"
  op: "Identity"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub/x"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub_1"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub/x"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub_1"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice"
  op: "StridedSlice"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Shape"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack_1"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape"
  op: "Pack"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/strided_slice"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/1"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/2"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape"
  op: "Reshape"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/cond/Identity"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_5/Mean"
  op: "Mean"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape"
  input: "normal_block_5/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\216]\324*\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/depthwise_conv2d_17/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_5/Mean"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/SpaceToBatchND"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_5/depthwise_conv2d_17/depthwise"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/batch_normalization_19/gamma"
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/gamma"
}
node {
  name: "normal_block_5/batch_normalization_19/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/batch_normalization_19/gamma"
  input: "normal_block_5/batch_normalization_19/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/batch_normalization_19/beta"
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/beta"
}
node {
  name: "normal_block_5/batch_normalization_19/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/batch_normalization_19/beta"
  input: "normal_block_5/batch_normalization_19/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/batch_normalization_19/moving_mean"
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
}
node {
  name: "normal_block_5/batch_normalization_19/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  input: "normal_block_5/batch_normalization_19/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/batch_normalization_19/moving_variance"
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
}
node {
  name: "normal_block_5/batch_normalization_19/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  input: "normal_block_5/batch_normalization_19/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_5/batch_normalization_19/gamma"
  input: "normal_block_5/batch_normalization_19/beta"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  input: "normal_block_5/depthwise_conv2d_17/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_5_batch_normalization_19_cond_false_4048"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_5_batch_normalization_19_cond_true_4047"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_1"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_2"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_3"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_4"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_5"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_6"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_7"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_8"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond/Identity_9"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_5_batch_normalization_19_cond_1_false_4116"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_5_batch_normalization_19_cond_1_true_4115"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/cond_1/Identity"
  op: "Identity"
  input: "normal_block_5/batch_normalization_19/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub/x"
  input: "normal_block_5/batch_normalization_19/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub_1"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
  input: "^normal_block_5/batch_normalization_19/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub/x"
  input: "normal_block_5/batch_normalization_19/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub_1"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  input: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/batch_normalization_19/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
  input: "^normal_block_5/batch_normalization_19/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/batch_normalization_19/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_5/mul"
  op: "Mul"
  input: "normal_block_5/beta"
  input: "normal_block_5/batch_normalization_19/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_5/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/mul_1"
  op: "Mul"
  input: "normal_block_5/batch_normalization_19/cond/Identity"
  input: "normal_block_5/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/Identity"
  op: "Identity"
  input: "normal_block_5/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/IdentityN"
  op: "IdentityN"
  input: "normal_block_5/mul_1"
  input: "normal_block_5/batch_normalization_19/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-4136"
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "=LR\r\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_5/conv2d_12/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_5/conv2d_12/kernel"
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_5/conv2d_12/kernel"
}
node {
  name: "normal_block_5/conv2d_12/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_5/conv2d_12/kernel"
  input: "normal_block_5/conv2d_12/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/conv2d_12/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_5/conv2d_12/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/conv2d_12/Conv2D"
  op: "Conv2D"
  input: "normal_block_5/IdentityN"
  input: "normal_block_5/conv2d_12/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_5/conv2d_12/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_5_spatial_dropout2d_8_cond_false_4160"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_5_spatial_dropout2d_8_cond_true_4159"
      }
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_1"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_2"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_3"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_4"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_5"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_6"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_7"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_8"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_9"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_10"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_11"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_12"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_13"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_14"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_15"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_16"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_17"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/spatial_dropout2d_8/cond/Identity_18"
  op: "Identity"
  input: "normal_block_5/spatial_dropout2d_8/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_5/add"
  op: "AddV2"
  input: "normal_block_5/spatial_dropout2d_8/cond/Identity"
  input: "normal_block_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/add_1"
  op: "AddV2"
  input: "normal_block_5/add"
  input: "normal_block_5/sub_spectral_normalization_8/reshape_17/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_5/Relu"
  op: "Relu"
  input: "normal_block_5/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "k\234\347\035\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_18/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_5/Relu"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/SpaceToBatchND"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_6/depthwise_conv2d_18/depthwise"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice"
  op: "StridedSlice"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Shape"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack_1"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape"
  op: "Pack"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/strided_slice"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/1"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/2"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape"
  op: "Reshape"
  input: "normal_block_6/depthwise_conv2d_18/depthwise/BatchToSpaceND"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_18/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_false_4317"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_true_4316"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_1"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_2"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_3"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_4"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_5"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_6"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_7"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_8"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_9"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_1_false_4385"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_1_true_4384"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond_1/Identity"
  op: "Identity"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub/x"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub_1"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub/x"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub_1"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice"
  op: "StridedSlice"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Shape"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack_1"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape"
  op: "Pack"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/strided_slice"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/1"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/2"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape"
  op: "Reshape"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/cond/Identity"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_6/Mean"
  op: "Mean"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape"
  input: "normal_block_6/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\212Z\205\024\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/depthwise_conv2d_19/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_6/Mean"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/SpaceToBatchND"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_6/depthwise_conv2d_19/depthwise"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/batch_normalization_21/gamma"
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/gamma"
}
node {
  name: "normal_block_6/batch_normalization_21/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/batch_normalization_21/gamma"
  input: "normal_block_6/batch_normalization_21/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/batch_normalization_21/beta"
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/beta"
}
node {
  name: "normal_block_6/batch_normalization_21/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/batch_normalization_21/beta"
  input: "normal_block_6/batch_normalization_21/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/batch_normalization_21/moving_mean"
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
}
node {
  name: "normal_block_6/batch_normalization_21/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  input: "normal_block_6/batch_normalization_21/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/batch_normalization_21/moving_variance"
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
}
node {
  name: "normal_block_6/batch_normalization_21/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  input: "normal_block_6/batch_normalization_21/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_6/batch_normalization_21/gamma"
  input: "normal_block_6/batch_normalization_21/beta"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  input: "normal_block_6/depthwise_conv2d_19/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_6_batch_normalization_21_cond_false_4461"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_6_batch_normalization_21_cond_true_4460"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_1"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_2"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_3"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_4"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_5"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_6"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_7"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_8"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond/Identity_9"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_6_batch_normalization_21_cond_1_false_4529"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_6_batch_normalization_21_cond_1_true_4528"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/cond_1/Identity"
  op: "Identity"
  input: "normal_block_6/batch_normalization_21/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub/x"
  input: "normal_block_6/batch_normalization_21/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub_1"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
  input: "^normal_block_6/batch_normalization_21/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub/x"
  input: "normal_block_6/batch_normalization_21/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub_1"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  input: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/batch_normalization_21/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
  input: "^normal_block_6/batch_normalization_21/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/batch_normalization_21/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_6/mul"
  op: "Mul"
  input: "normal_block_6/beta"
  input: "normal_block_6/batch_normalization_21/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_6/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/mul_1"
  op: "Mul"
  input: "normal_block_6/batch_normalization_21/cond/Identity"
  input: "normal_block_6/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/Identity"
  op: "Identity"
  input: "normal_block_6/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/IdentityN"
  op: "IdentityN"
  input: "normal_block_6/mul_1"
  input: "normal_block_6/batch_normalization_21/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-4549"
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "S\322\t&\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_6/conv2d_13/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_6/conv2d_13/kernel"
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_6/conv2d_13/kernel"
}
node {
  name: "normal_block_6/conv2d_13/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_6/conv2d_13/kernel"
  input: "normal_block_6/conv2d_13/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/conv2d_13/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_6/conv2d_13/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/conv2d_13/Conv2D"
  op: "Conv2D"
  input: "normal_block_6/IdentityN"
  input: "normal_block_6/conv2d_13/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_6/conv2d_13/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_6_spatial_dropout2d_9_cond_false_4573"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_6_spatial_dropout2d_9_cond_true_4572"
      }
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_1"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_2"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_3"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_4"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_5"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_6"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_7"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_8"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_9"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_10"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_11"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_12"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_13"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_14"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_15"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_16"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_17"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/spatial_dropout2d_9/cond/Identity_18"
  op: "Identity"
  input: "normal_block_6/spatial_dropout2d_9/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_6/add"
  op: "AddV2"
  input: "normal_block_6/spatial_dropout2d_9/cond/Identity"
  input: "normal_block_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/add_1"
  op: "AddV2"
  input: "normal_block_6/add"
  input: "normal_block_6/sub_spectral_normalization_9/reshape_19/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_6/Relu"
  op: "Relu"
  input: "normal_block_6/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000@\370(\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_20/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_6/Relu"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/SpaceToBatchND"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_7/depthwise_conv2d_20/depthwise"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice"
  op: "StridedSlice"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Shape"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack_1"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 80
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape"
  op: "Pack"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/strided_slice"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/1"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/2"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape"
  op: "Reshape"
  input: "normal_block_7/depthwise_conv2d_20/depthwise/BatchToSpaceND"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 80
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 80
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_20/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_false_4730"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
          dim {
            size: 80
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_true_4729"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_1"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_2"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_3"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_4"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_5"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_6"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_7"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_8"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_9"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_1_false_4798"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_1_true_4797"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond_1/Identity"
  op: "Identity"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub/x"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub_1"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub/x"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub_1"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice"
  op: "StridedSlice"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Shape"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack_1"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape"
  op: "Pack"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/strided_slice"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/1"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/2"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape"
  op: "Reshape"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/cond/Identity"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_7/Mean"
  op: "Mean"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape"
  input: "normal_block_7/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\313E>6\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/depthwise_conv2d_21/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\020\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_7/Mean"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/SpaceToBatchND"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_7/depthwise_conv2d_21/depthwise"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/batch_normalization_23/gamma"
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/gamma"
}
node {
  name: "normal_block_7/batch_normalization_23/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/batch_normalization_23/gamma"
  input: "normal_block_7/batch_normalization_23/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/batch_normalization_23/beta"
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/beta"
}
node {
  name: "normal_block_7/batch_normalization_23/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/batch_normalization_23/beta"
  input: "normal_block_7/batch_normalization_23/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/batch_normalization_23/moving_mean"
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
}
node {
  name: "normal_block_7/batch_normalization_23/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  input: "normal_block_7/batch_normalization_23/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/batch_normalization_23/moving_variance"
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
}
node {
  name: "normal_block_7/batch_normalization_23/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  input: "normal_block_7/batch_normalization_23/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_7/batch_normalization_23/gamma"
  input: "normal_block_7/batch_normalization_23/beta"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  input: "normal_block_7/depthwise_conv2d_21/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_7_batch_normalization_23_cond_false_4874"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_7_batch_normalization_23_cond_true_4873"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_1"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_2"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_3"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_4"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_5"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_6"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_7"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_8"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond/Identity_9"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_7_batch_normalization_23_cond_1_false_4942"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_7_batch_normalization_23_cond_1_true_4941"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/cond_1/Identity"
  op: "Identity"
  input: "normal_block_7/batch_normalization_23/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub/x"
  input: "normal_block_7/batch_normalization_23/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub_1"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
  input: "^normal_block_7/batch_normalization_23/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub/x"
  input: "normal_block_7/batch_normalization_23/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub_1"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  input: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/batch_normalization_23/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
  input: "^normal_block_7/batch_normalization_23/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/batch_normalization_23/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_7/mul"
  op: "Mul"
  input: "normal_block_7/beta"
  input: "normal_block_7/batch_normalization_23/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_7/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/mul_1"
  op: "Mul"
  input: "normal_block_7/batch_normalization_23/cond/Identity"
  input: "normal_block_7/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/Identity"
  op: "Identity"
  input: "normal_block_7/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/IdentityN"
  op: "IdentityN"
  input: "normal_block_7/mul_1"
  input: "normal_block_7/batch_normalization_23/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-4962"
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\255\371\2724\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_7/conv2d_14/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_7/conv2d_14/kernel"
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_7/conv2d_14/kernel"
}
node {
  name: "normal_block_7/conv2d_14/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_7/conv2d_14/kernel"
  input: "normal_block_7/conv2d_14/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/conv2d_14/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_7/conv2d_14/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/conv2d_14/Conv2D"
  op: "Conv2D"
  input: "normal_block_7/IdentityN"
  input: "normal_block_7/conv2d_14/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_7/conv2d_14/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_7_spatial_dropout2d_10_cond_false_4986"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_7_spatial_dropout2d_10_cond_true_4985"
      }
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_1"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_2"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_3"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_4"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_5"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_6"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_7"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_8"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_9"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_10"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_11"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_12"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_13"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_14"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_15"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_16"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_17"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/spatial_dropout2d_10/cond/Identity_18"
  op: "Identity"
  input: "normal_block_7/spatial_dropout2d_10/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_7/add"
  op: "AddV2"
  input: "normal_block_7/spatial_dropout2d_10/cond/Identity"
  input: "normal_block_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/add_1"
  op: "AddV2"
  input: "normal_block_7/add"
  input: "normal_block_7/sub_spectral_normalization_10/reshape_21/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_7/Relu"
  op: "Relu"
  input: "normal_block_7/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.40824830532073975
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40824830532073975
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\213\257\0005\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_15/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/conv2d_15/kernel"
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/conv2d_15/kernel"
}
node {
  name: "transition_block_3/conv2d_15/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/conv2d_15/kernel"
  input: "transition_block_3/conv2d_15/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/conv2d_15/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/conv2d_15/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_15/Conv2D"
  op: "Conv2D"
  input: "normal_block_7/Relu"
  input: "transition_block_3/conv2d_15/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_25/gamma"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/gamma"
}
node {
  name: "transition_block_3/batch_normalization_25/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_25/gamma"
  input: "transition_block_3/batch_normalization_25/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_25/beta"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/beta"
}
node {
  name: "transition_block_3/batch_normalization_25/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_25/beta"
  input: "transition_block_3/batch_normalization_25/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_25/moving_mean"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
}
node {
  name: "transition_block_3/batch_normalization_25/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  input: "transition_block_3/batch_normalization_25/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_25/moving_variance"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
}
node {
  name: "transition_block_3/batch_normalization_25/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  input: "transition_block_3/batch_normalization_25/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_3/batch_normalization_25/gamma"
  input: "transition_block_3/batch_normalization_25/beta"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  input: "transition_block_3/conv2d_15/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_25_cond_false_5121"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_25_cond_true_5120"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_1"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_2"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_3"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_4"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_5"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_6"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_7"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_8"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond/Identity_9"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_25_cond_1_false_5189"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_25_cond_1_true_5188"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/cond_1/Identity"
  op: "Identity"
  input: "transition_block_3/batch_normalization_25/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub/x"
  input: "transition_block_3/batch_normalization_25/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub_1"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
  input: "^transition_block_3/batch_normalization_25/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub/x"
  input: "transition_block_3/batch_normalization_25/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub_1"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  input: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_25/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
  input: "^transition_block_3/batch_normalization_25/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_25/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/Relu"
  op: "Relu"
  input: "transition_block_3/batch_normalization_25/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\220\002/\027\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_22/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_3/Relu"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/SpaceToBatchND"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_3/depthwise_conv2d_22/depthwise"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice"
  op: "StridedSlice"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Shape"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack_1"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape"
  op: "Pack"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/strided_slice"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/1"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/2"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape"
  op: "Reshape"
  input: "transition_block_3/depthwise_conv2d_22/depthwise/BatchToSpaceND"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_22/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_false_5264"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_true_5263"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_1"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_2"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_3"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_4"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_5"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_6"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_7"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_8"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_9"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_1_false_5332"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_1_true_5331"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond_1/Identity"
  op: "Identity"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub/x"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub_1"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub/x"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub_1"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice"
  op: "StridedSlice"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Shape"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack_1"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape"
  op: "Pack"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/strided_slice"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/1"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/2"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape"
  op: "Reshape"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/cond/Identity"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "transition_block_3/Mean"
  op: "Mean"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape"
  input: "transition_block_3/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\315S\006\033\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/depthwise_conv2d_23/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_3/Mean"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND/block_shape"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise"
  op: "DepthwiseConv2dNative"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/SpaceToBatchND"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "transition_block_3/depthwise_conv2d_23/depthwise"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND/block_shape"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_26/gamma"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/gamma"
}
node {
  name: "transition_block_3/batch_normalization_26/gamma/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_26/gamma"
  input: "transition_block_3/batch_normalization_26/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_26/beta"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/beta"
}
node {
  name: "transition_block_3/batch_normalization_26/beta/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_26/beta"
  input: "transition_block_3/batch_normalization_26/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_26/moving_mean"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
}
node {
  name: "transition_block_3/batch_normalization_26/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  input: "transition_block_3/batch_normalization_26/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/batch_normalization_26/moving_variance"
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
}
node {
  name: "transition_block_3/batch_normalization_26/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  input: "transition_block_3/batch_normalization_26/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_3/batch_normalization_26/gamma"
  input: "transition_block_3/batch_normalization_26/beta"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  input: "transition_block_3/depthwise_conv2d_23/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_26_cond_false_5408"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_26_cond_true_5407"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_1"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_2"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_3"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_4"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_5"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_6"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_7"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_8"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond/Identity_9"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_26_cond_1_false_5476"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_batch_normalization_26_cond_1_true_5475"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/cond_1/Identity"
  op: "Identity"
  input: "transition_block_3/batch_normalization_26/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub"
  op: "Sub"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub/x"
  input: "transition_block_3/batch_normalization_26/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg/ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/mul"
  op: "Mul"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub_1"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
  input: "^transition_block_3/batch_normalization_26/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub/x"
  input: "transition_block_3/batch_normalization_26/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub_1"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  input: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/batch_normalization_26/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
  input: "^transition_block_3/batch_normalization_26/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/batch_normalization_26/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "transition_block_3/mul"
  op: "Mul"
  input: "transition_block_3/beta"
  input: "transition_block_3/batch_normalization_26/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/Sigmoid"
  op: "Sigmoid"
  input: "transition_block_3/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/mul_1"
  op: "Mul"
  input: "transition_block_3/batch_normalization_26/cond/Identity"
  input: "transition_block_3/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/Identity"
  op: "Identity"
  input: "transition_block_3/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/IdentityN"
  op: "IdentityN"
  input: "transition_block_3/mul_1"
  input: "transition_block_3/batch_normalization_26/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-5496"
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "qM\r3\000\000\000\000"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/shape"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/max"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/mul"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@transition_block_3/conv2d_16/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "transition_block_3/conv2d_16/kernel"
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "transition_block_3/conv2d_16/kernel"
}
node {
  name: "transition_block_3/conv2d_16/kernel/Assign"
  op: "AssignVariableOp"
  input: "transition_block_3/conv2d_16/kernel"
  input: "transition_block_3/conv2d_16/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/conv2d_16/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "transition_block_3/conv2d_16/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/conv2d_16/Conv2D"
  op: "Conv2D"
  input: "transition_block_3/IdentityN"
  input: "transition_block_3/conv2d_16/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "transition_block_3/conv2d_16/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "transition_block_3_spatial_dropout2d_11_cond_false_5520"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "transition_block_3_spatial_dropout2d_11_cond_true_5519"
      }
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_1"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_2"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_3"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_4"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_5"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_6"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_7"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_8"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_9"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_10"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_11"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_12"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_13"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_14"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_15"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_16"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_17"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/spatial_dropout2d_11/cond/Identity_18"
  op: "Identity"
  input: "transition_block_3/spatial_dropout2d_11/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "transition_block_3/add"
  op: "AddV2"
  input: "transition_block_3/spatial_dropout2d_11/cond/Identity"
  input: "transition_block_3/sub_spectral_normalization_11/reshape_23/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "transition_block_3/Relu_1"
  op: "Relu"
  input: "transition_block_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\216\263\260\016\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_24/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "transition_block_3/Relu_1"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/SpaceToBatchND"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_8/depthwise_conv2d_24/depthwise"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice"
  op: "StridedSlice"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Shape"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack_1"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape"
  op: "Pack"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/strided_slice"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/1"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/2"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape"
  op: "Reshape"
  input: "normal_block_8/depthwise_conv2d_24/depthwise/BatchToSpaceND"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_24/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_false_5676"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_true_5675"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_1"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_2"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_3"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_4"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_5"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_6"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_7"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_8"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_9"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_1_false_5744"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_1_true_5743"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond_1/Identity"
  op: "Identity"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub/x"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub_1"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub/x"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub_1"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice"
  op: "StridedSlice"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Shape"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack_1"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape"
  op: "Pack"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/strided_slice"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/1"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/2"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape"
  op: "Reshape"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/cond/Identity"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_8/Mean"
  op: "Mean"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape"
  input: "normal_block_8/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\235\317p\003\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/depthwise_conv2d_25/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_8/Mean"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/SpaceToBatchND"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_8/depthwise_conv2d_25/depthwise"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/batch_normalization_28/gamma"
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/gamma"
}
node {
  name: "normal_block_8/batch_normalization_28/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/batch_normalization_28/gamma"
  input: "normal_block_8/batch_normalization_28/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/batch_normalization_28/beta"
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/beta"
}
node {
  name: "normal_block_8/batch_normalization_28/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/batch_normalization_28/beta"
  input: "normal_block_8/batch_normalization_28/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/batch_normalization_28/moving_mean"
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
}
node {
  name: "normal_block_8/batch_normalization_28/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  input: "normal_block_8/batch_normalization_28/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/batch_normalization_28/moving_variance"
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
}
node {
  name: "normal_block_8/batch_normalization_28/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  input: "normal_block_8/batch_normalization_28/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_8/batch_normalization_28/gamma"
  input: "normal_block_8/batch_normalization_28/beta"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  input: "normal_block_8/depthwise_conv2d_25/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_8_batch_normalization_28_cond_false_5820"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_8_batch_normalization_28_cond_true_5819"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_1"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_2"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_3"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_4"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_5"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_6"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_7"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_8"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond/Identity_9"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_8_batch_normalization_28_cond_1_false_5888"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_8_batch_normalization_28_cond_1_true_5887"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/cond_1/Identity"
  op: "Identity"
  input: "normal_block_8/batch_normalization_28/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub/x"
  input: "normal_block_8/batch_normalization_28/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub_1"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
  input: "^normal_block_8/batch_normalization_28/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub/x"
  input: "normal_block_8/batch_normalization_28/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub_1"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  input: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/batch_normalization_28/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
  input: "^normal_block_8/batch_normalization_28/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/batch_normalization_28/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_8/mul"
  op: "Mul"
  input: "normal_block_8/beta"
  input: "normal_block_8/batch_normalization_28/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_8/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/mul_1"
  op: "Mul"
  input: "normal_block_8/batch_normalization_28/cond/Identity"
  input: "normal_block_8/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/Identity"
  op: "Identity"
  input: "normal_block_8/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/IdentityN"
  op: "IdentityN"
  input: "normal_block_8/mul_1"
  input: "normal_block_8/batch_normalization_28/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-5908"
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\320\23487\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_8/conv2d_17/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_8/conv2d_17/kernel"
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_8/conv2d_17/kernel"
}
node {
  name: "normal_block_8/conv2d_17/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_8/conv2d_17/kernel"
  input: "normal_block_8/conv2d_17/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/conv2d_17/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_8/conv2d_17/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/conv2d_17/Conv2D"
  op: "Conv2D"
  input: "normal_block_8/IdentityN"
  input: "normal_block_8/conv2d_17/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_8/conv2d_17/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_8_spatial_dropout2d_12_cond_false_5932"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_8_spatial_dropout2d_12_cond_true_5931"
      }
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_1"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_2"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_3"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_4"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_5"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_6"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_7"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_8"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_9"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_10"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_11"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_12"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_13"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_14"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_15"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_16"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_17"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/spatial_dropout2d_12/cond/Identity_18"
  op: "Identity"
  input: "normal_block_8/spatial_dropout2d_12/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_8/add"
  op: "AddV2"
  input: "normal_block_8/spatial_dropout2d_12/cond/Identity"
  input: "transition_block_3/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/add_1"
  op: "AddV2"
  input: "normal_block_8/add"
  input: "normal_block_8/sub_spectral_normalization_12/reshape_25/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_8/Relu"
  op: "Relu"
  input: "normal_block_8/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\306\003\377#\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_26/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_8/Relu"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/SpaceToBatchND"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_9/depthwise_conv2d_26/depthwise"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice"
  op: "StridedSlice"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Shape"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack_1"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape"
  op: "Pack"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/strided_slice"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/1"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/2"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape"
  op: "Reshape"
  input: "normal_block_9/depthwise_conv2d_26/depthwise/BatchToSpaceND"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_26/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_false_6089"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_true_6088"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_1"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_2"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_3"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_4"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_5"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_6"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_7"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_8"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_9"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_1_false_6157"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_1_true_6156"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond_1/Identity"
  op: "Identity"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub/x"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub_1"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub/x"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub_1"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice"
  op: "StridedSlice"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Shape"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack_1"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape"
  op: "Pack"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/strided_slice"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/1"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/2"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape"
  op: "Reshape"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/cond/Identity"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_9/Mean"
  op: "Mean"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape"
  input: "normal_block_9/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\222\r\213-\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/depthwise_conv2d_27/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_9/Mean"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/SpaceToBatchND"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_9/depthwise_conv2d_27/depthwise"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/batch_normalization_30/gamma"
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/gamma"
}
node {
  name: "normal_block_9/batch_normalization_30/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/batch_normalization_30/gamma"
  input: "normal_block_9/batch_normalization_30/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/batch_normalization_30/beta"
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/beta"
}
node {
  name: "normal_block_9/batch_normalization_30/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/batch_normalization_30/beta"
  input: "normal_block_9/batch_normalization_30/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/batch_normalization_30/moving_mean"
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
}
node {
  name: "normal_block_9/batch_normalization_30/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  input: "normal_block_9/batch_normalization_30/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/batch_normalization_30/moving_variance"
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
}
node {
  name: "normal_block_9/batch_normalization_30/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  input: "normal_block_9/batch_normalization_30/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_9/batch_normalization_30/gamma"
  input: "normal_block_9/batch_normalization_30/beta"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  input: "normal_block_9/depthwise_conv2d_27/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_9_batch_normalization_30_cond_false_6233"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_9_batch_normalization_30_cond_true_6232"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_1"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_2"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_3"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_4"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_5"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_6"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_7"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_8"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond/Identity_9"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_9_batch_normalization_30_cond_1_false_6301"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_9_batch_normalization_30_cond_1_true_6300"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/cond_1/Identity"
  op: "Identity"
  input: "normal_block_9/batch_normalization_30/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub/x"
  input: "normal_block_9/batch_normalization_30/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub_1"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
  input: "^normal_block_9/batch_normalization_30/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub/x"
  input: "normal_block_9/batch_normalization_30/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub_1"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  input: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/batch_normalization_30/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
  input: "^normal_block_9/batch_normalization_30/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/batch_normalization_30/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_9/mul"
  op: "Mul"
  input: "normal_block_9/beta"
  input: "normal_block_9/batch_normalization_30/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_9/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/mul_1"
  op: "Mul"
  input: "normal_block_9/batch_normalization_30/cond/Identity"
  input: "normal_block_9/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/Identity"
  op: "Identity"
  input: "normal_block_9/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/IdentityN"
  op: "IdentityN"
  input: "normal_block_9/mul_1"
  input: "normal_block_9/batch_normalization_30/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-6321"
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010v\371\001\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_9/conv2d_18/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_9/conv2d_18/kernel"
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_9/conv2d_18/kernel"
}
node {
  name: "normal_block_9/conv2d_18/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_9/conv2d_18/kernel"
  input: "normal_block_9/conv2d_18/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/conv2d_18/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_9/conv2d_18/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/conv2d_18/Conv2D"
  op: "Conv2D"
  input: "normal_block_9/IdentityN"
  input: "normal_block_9/conv2d_18/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_9/conv2d_18/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_9_spatial_dropout2d_13_cond_false_6345"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_9_spatial_dropout2d_13_cond_true_6344"
      }
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_1"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_2"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_3"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_4"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_5"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_6"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_7"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_8"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_9"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_10"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_11"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_12"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_13"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_14"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_15"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_16"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_17"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/spatial_dropout2d_13/cond/Identity_18"
  op: "Identity"
  input: "normal_block_9/spatial_dropout2d_13/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_9/add"
  op: "AddV2"
  input: "normal_block_9/spatial_dropout2d_13/cond/Identity"
  input: "normal_block_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/add_1"
  op: "AddV2"
  input: "normal_block_9/add"
  input: "normal_block_9/sub_spectral_normalization_13/reshape_27/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_9/Relu"
  op: "Relu"
  input: "normal_block_9/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\353o\035\022\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_28/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_9/Relu"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/SpaceToBatchND"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_10/depthwise_conv2d_28/depthwise"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice"
  op: "StridedSlice"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Shape"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack_1"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape"
  op: "Pack"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/strided_slice"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/1"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/2"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape"
  op: "Reshape"
  input: "normal_block_10/depthwise_conv2d_28/depthwise/BatchToSpaceND"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_28/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_false_6502"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_true_6501"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_1"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_2"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_3"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_4"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_5"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_6"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_7"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_8"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_9"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_1_false_6570"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_1_true_6569"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond_1/Identity"
  op: "Identity"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub/x"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub_1"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub/x"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub_1"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice"
  op: "StridedSlice"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Shape"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack_1"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape"
  op: "Pack"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/strided_slice"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/1"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/2"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape"
  op: "Reshape"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/cond/Identity"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_10/Mean"
  op: "Mean"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape"
  input: "normal_block_10/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\360\2612;\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/depthwise_conv2d_29/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_10/Mean"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/SpaceToBatchND"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_10/depthwise_conv2d_29/depthwise"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/batch_normalization_32/gamma"
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/gamma"
}
node {
  name: "normal_block_10/batch_normalization_32/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/batch_normalization_32/gamma"
  input: "normal_block_10/batch_normalization_32/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/batch_normalization_32/beta"
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/beta"
}
node {
  name: "normal_block_10/batch_normalization_32/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/batch_normalization_32/beta"
  input: "normal_block_10/batch_normalization_32/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/batch_normalization_32/moving_mean"
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
}
node {
  name: "normal_block_10/batch_normalization_32/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  input: "normal_block_10/batch_normalization_32/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/batch_normalization_32/moving_variance"
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
}
node {
  name: "normal_block_10/batch_normalization_32/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  input: "normal_block_10/batch_normalization_32/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_10/batch_normalization_32/gamma"
  input: "normal_block_10/batch_normalization_32/beta"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  input: "normal_block_10/depthwise_conv2d_29/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_10_batch_normalization_32_cond_false_6646"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_10_batch_normalization_32_cond_true_6645"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_1"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_2"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_3"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_4"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_5"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_6"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_7"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_8"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond/Identity_9"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_10_batch_normalization_32_cond_1_false_6714"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_10_batch_normalization_32_cond_1_true_6713"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/cond_1/Identity"
  op: "Identity"
  input: "normal_block_10/batch_normalization_32/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub/x"
  input: "normal_block_10/batch_normalization_32/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub_1"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
  input: "^normal_block_10/batch_normalization_32/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub/x"
  input: "normal_block_10/batch_normalization_32/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub_1"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  input: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/batch_normalization_32/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
  input: "^normal_block_10/batch_normalization_32/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/batch_normalization_32/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_10/mul"
  op: "Mul"
  input: "normal_block_10/beta"
  input: "normal_block_10/batch_normalization_32/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_10/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/mul_1"
  op: "Mul"
  input: "normal_block_10/batch_normalization_32/cond/Identity"
  input: "normal_block_10/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/Identity"
  op: "Identity"
  input: "normal_block_10/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/IdentityN"
  op: "IdentityN"
  input: "normal_block_10/mul_1"
  input: "normal_block_10/batch_normalization_32/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-6734"
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\222:\023\034\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_10/conv2d_19/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_10/conv2d_19/kernel"
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_10/conv2d_19/kernel"
}
node {
  name: "normal_block_10/conv2d_19/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_10/conv2d_19/kernel"
  input: "normal_block_10/conv2d_19/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/conv2d_19/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_10/conv2d_19/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/conv2d_19/Conv2D"
  op: "Conv2D"
  input: "normal_block_10/IdentityN"
  input: "normal_block_10/conv2d_19/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_10/conv2d_19/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_10_spatial_dropout2d_14_cond_false_6758"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_10_spatial_dropout2d_14_cond_true_6757"
      }
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_1"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_2"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_3"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_4"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_5"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_6"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_7"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_8"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_9"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_10"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_11"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_12"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_13"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_14"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_15"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_16"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_17"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/spatial_dropout2d_14/cond/Identity_18"
  op: "Identity"
  input: "normal_block_10/spatial_dropout2d_14/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_10/add"
  op: "AddV2"
  input: "normal_block_10/spatial_dropout2d_14/cond/Identity"
  input: "normal_block_9/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/add_1"
  op: "AddV2"
  input: "normal_block_10/add"
  input: "normal_block_10/sub_spectral_normalization_14/reshape_29/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_10/Relu"
  op: "Relu"
  input: "normal_block_10/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\250\232\345\"\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_30/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_10/Relu"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/SpaceToBatchND"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_11/depthwise_conv2d_30/depthwise"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\005\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice"
  op: "StridedSlice"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Shape"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack_1"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape"
  op: "Pack"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/strided_slice"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/1"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/2"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape"
  op: "Reshape"
  input: "normal_block_11/depthwise_conv2d_30/depthwise/BatchToSpaceND"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_30/Reshape"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_false_6915"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_true_6914"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_1"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_2"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_3"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_4"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_5"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_6"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_7"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_8"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_9"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_1_false_6983"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_1_true_6982"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond_1/Identity"
  op: "Identity"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub/x"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub_1"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub/x"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub_1"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "d\000\000\000b\000\000\000\001\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice"
  op: "StridedSlice"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Shape"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack_1"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 98
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape"
  op: "Pack"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/strided_slice"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/1"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/2"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape"
  op: "Reshape"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/cond/Identity"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "normal_block_11/Mean"
  op: "Mean"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape"
  input: "normal_block_11/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30860671401023865
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\306n\375\017\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/depthwise_conv2d_31/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\001\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "b\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "normal_block_11/Mean"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND/block_shape"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/SpaceToBatchND"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "normal_block_11/depthwise_conv2d_31/depthwise"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND/block_shape"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/gamma"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/gamma"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/batch_normalization_34/gamma"
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/gamma/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/gamma"
}
node {
  name: "normal_block_11/batch_normalization_34/gamma/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/batch_normalization_34/gamma"
  input: "normal_block_11/batch_normalization_34/gamma/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/gamma/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/gamma"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/beta"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/beta"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/batch_normalization_34/beta"
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/beta/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/beta"
}
node {
  name: "normal_block_11/batch_normalization_34/beta/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/batch_normalization_34/beta"
  input: "normal_block_11/batch_normalization_34/beta/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/beta/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/beta"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_mean"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/batch_normalization_34/moving_mean"
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_mean/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
}
node {
  name: "normal_block_11/batch_normalization_34/moving_mean/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  input: "normal_block_11/batch_normalization_34/moving_mean/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_mean/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_variance"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/batch_normalization_34/moving_variance"
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_variance/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
}
node {
  name: "normal_block_11/batch_normalization_34/moving_variance/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  input: "normal_block_11/batch_normalization_34/moving_variance/Initializer/ones"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/moving_variance/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_11/batch_normalization_34/gamma"
  input: "normal_block_11/batch_normalization_34/beta"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  input: "normal_block_11/depthwise_conv2d_31/depthwise/BatchToSpaceND"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
        i: 2
        i: 3
        i: 4
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_11_batch_normalization_34_cond_false_7059"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_11_batch_normalization_34_cond_true_7058"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_1"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_2"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_3"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_4"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_5"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_6"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_7"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_8"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond/Identity_9"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond_1"
  op: "StatelessIf"
  input: "keras_learning_phase"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_11_batch_normalization_34_cond_1_false_7127"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_11_batch_normalization_34_cond_1_true_7126"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/cond_1/Identity"
  op: "Identity"
  input: "normal_block_11/batch_normalization_34/cond_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub"
  op: "Sub"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub/x"
  input: "normal_block_11/batch_normalization_34/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg/ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/cond/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/mul"
  op: "Mul"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub_1"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
  input: "^normal_block_11/batch_normalization_34/AssignMovingAvg/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub/x"
  input: "normal_block_11/batch_normalization_34/cond_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/cond/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub_1"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/AssignSubVariableOp"
  op: "AssignSubVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  input: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/batch_normalization_34/AssignMovingAvg_1/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
  input: "^normal_block_11/batch_normalization_34/AssignMovingAvg_1/AssignSubVariableOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/batch_normalization_34/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "normal_block_11/mul"
  op: "Mul"
  input: "normal_block_11/beta"
  input: "normal_block_11/batch_normalization_34/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/Sigmoid"
  op: "Sigmoid"
  input: "normal_block_11/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/mul_1"
  op: "Mul"
  input: "normal_block_11/batch_normalization_34/cond/Identity"
  input: "normal_block_11/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/Identity"
  op: "Identity"
  input: "normal_block_11/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/IdentityN"
  op: "IdentityN"
  input: "normal_block_11/mul_1"
  input: "normal_block_11/batch_normalization_34/cond/Identity"
  attr {
    key: "T"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_gradient_op_type"
    value {
      s: "CustomGradient-7147"
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\375@d,\000\000\000\000"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/shape"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/max"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/mul"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@normal_block_11/conv2d_20/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "normal_block_11/conv2d_20/kernel"
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block_11/conv2d_20/kernel"
}
node {
  name: "normal_block_11/conv2d_20/kernel/Assign"
  op: "AssignVariableOp"
  input: "normal_block_11/conv2d_20/kernel"
  input: "normal_block_11/conv2d_20/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/conv2d_20/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "normal_block_11/conv2d_20/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/conv2d_20/Conv2D"
  op: "Conv2D"
  input: "normal_block_11/IdentityN"
  input: "normal_block_11/conv2d_20/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond"
  op: "If"
  input: "keras_learning_phase"
  input: "normal_block_11/conv2d_20/Conv2D"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "normal_block_11_spatial_dropout2d_15_cond_false_7171"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 98
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "normal_block_11_spatial_dropout2d_15_cond_true_7170"
      }
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_1"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_2"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_3"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_4"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_5"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_6"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:6"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_7"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:7"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_8"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:8"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_9"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:9"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_10"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:10"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_11"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:11"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_12"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:12"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_13"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:13"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_14"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:14"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_15"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:15"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_16"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:16"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_17"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:17"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/spatial_dropout2d_15/cond/Identity_18"
  op: "Identity"
  input: "normal_block_11/spatial_dropout2d_15/cond:18"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
}
node {
  name: "normal_block_11/add"
  op: "AddV2"
  input: "normal_block_11/spatial_dropout2d_15/cond/Identity"
  input: "normal_block_10/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/add_1"
  op: "AddV2"
  input: "normal_block_11/add"
  input: "normal_block_11/sub_spectral_normalization_15/reshape_31/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "normal_block_11/Relu"
  op: "Relu"
  input: "normal_block_11/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10690449923276901
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10690449923276901
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "c\202`1\000\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/shape"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/max"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/mul"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/depthwise_kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "depthwise_conv2d_32/depthwise_kernel"
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "depthwise_conv2d_32/depthwise_kernel"
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Assign"
  op: "AssignVariableOp"
  input: "depthwise_conv2d_32/depthwise_kernel"
  input: "depthwise_conv2d_32/depthwise_kernel/Initializer/stateless_random_uniform"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise_kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "depthwise_conv2d_32/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@depthwise_conv2d_32/bias"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "depthwise_conv2d_32/bias"
    }
  }
}
node {
  name: "depthwise_conv2d_32/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "depthwise_conv2d_32/bias"
}
node {
  name: "depthwise_conv2d_32/bias/Assign"
  op: "AssignVariableOp"
  input: "depthwise_conv2d_32/bias"
  input: "depthwise_conv2d_32/bias/Initializer/zeros"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "depthwise_conv2d_32/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "depthwise_conv2d_32/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise/ReadVariableOp"
  op: "ReadVariableOp"
  input: "depthwise_conv2d_32/depthwise_kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/depthwise"
  op: "DepthwiseConv2dNative"
  input: "normal_block_11/Relu"
  input: "depthwise_conv2d_32/depthwise/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "depthwise_conv2d_32/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "depthwise_conv2d_32/bias"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "depthwise_conv2d_32/BiasAdd"
  op: "BiasAdd"
  input: "depthwise_conv2d_32/depthwise"
  input: "depthwise_conv2d_32/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "depthwise_conv2d_32/BiasAdd"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^Mean/reduction_indices"
}
node {
  name: "VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/moving_mean"
}
node {
  name: "VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "normal_block_1/depthwise_conv2d_4/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma"
}
node {
  name: "VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance"
}
node {
  name: "VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma"
}
node {
  name: "VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean"
}
node {
  name: "VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/beta"
}
node {
  name: "VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "normal_block_4/depthwise_conv2d_14/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/moving_mean"
}
node {
  name: "VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/moving_mean"
}
node {
  name: "VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "transition_block_3/depthwise_conv2d_22/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "transition_block_3/conv2d_16/kernel"
}
node {
  name: "VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/gamma"
}
node {
  name: "VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "normal_block_1/depthwise_conv2d_5/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/gamma"
}
node {
  name: "VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "normal_block_5/depthwise_conv2d_16/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/gamma"
}
node {
  name: "VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "normal_block_10/conv2d_19/kernel"
}
node {
  name: "VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/moving_mean"
}
node {
  name: "VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "transition_block_1/conv2d_5/kernel"
}
node {
  name: "VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/moving_variance"
}
node {
  name: "VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "transition_block_2/conv2d_10/kernel"
}
node {
  name: "VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance"
}
node {
  name: "VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean"
}
node {
  name: "VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma"
}
node {
  name: "VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/moving_variance"
}
node {
  name: "VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "normal_block_7/conv2d_14/kernel"
}
node {
  name: "VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance"
}
node {
  name: "VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta"
}
node {
  name: "VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "normal_block_3/depthwise_conv2d_11/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "normal_block_4/conv2d_11/kernel"
}
node {
  name: "VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean"
}
node {
  name: "VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/moving_variance"
}
node {
  name: "VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta"
}
node {
  name: "VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "transition_block_3/depthwise_conv2d_23/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance"
}
node {
  name: "VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/beta"
}
node {
  name: "VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/gamma"
}
node {
  name: "VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "transition_block_1/conv2d_6/kernel"
}
node {
  name: "VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "normal_block_10/depthwise_conv2d_29/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "normal_block_11/conv2d_20/kernel"
}
node {
  name: "VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean"
}
node {
  name: "VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/moving_variance"
}
node {
  name: "VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
}
node {
  name: "VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/moving_mean"
}
node {
  name: "VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma"
}
node {
  name: "VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/moving_variance"
}
node {
  name: "VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma"
}
node {
  name: "VarIsInitializedOp_48"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean"
}
node {
  name: "VarIsInitializedOp_49"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/gamma"
}
node {
  name: "VarIsInitializedOp_50"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/beta"
}
node {
  name: "VarIsInitializedOp_51"
  op: "VarIsInitializedOp"
  input: "normal_block/depthwise_conv2d_2/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_52"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/beta"
}
node {
  name: "VarIsInitializedOp_53"
  op: "VarIsInitializedOp"
  input: "normal_block_6/depthwise_conv2d_19/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_54"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance"
}
node {
  name: "VarIsInitializedOp_55"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/gamma"
}
node {
  name: "VarIsInitializedOp_56"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma"
}
node {
  name: "VarIsInitializedOp_57"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/beta"
}
node {
  name: "VarIsInitializedOp_58"
  op: "VarIsInitializedOp"
  input: "transition_block/conv2d_2/kernel"
}
node {
  name: "VarIsInitializedOp_59"
  op: "VarIsInitializedOp"
  input: "normal_block/depthwise_conv2d_3/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_60"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma"
}
node {
  name: "VarIsInitializedOp_61"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance"
}
node {
  name: "VarIsInitializedOp_62"
  op: "VarIsInitializedOp"
  input: "normal_block_7/depthwise_conv2d_20/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_63"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/moving_mean"
}
node {
  name: "VarIsInitializedOp_64"
  op: "VarIsInitializedOp"
  input: "normal_block_9/depthwise_conv2d_27/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_65"
  op: "VarIsInitializedOp"
  input: "normal_block_10/depthwise_conv2d_28/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_66"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/moving_mean"
}
node {
  name: "VarIsInitializedOp_67"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/moving_variance"
}
node {
  name: "VarIsInitializedOp_68"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/moving_variance"
}
node {
  name: "VarIsInitializedOp_69"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/moving_mean"
}
node {
  name: "VarIsInitializedOp_70"
  op: "VarIsInitializedOp"
  input: "transition_block_1/depthwise_conv2d_6/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_71"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/gamma"
}
node {
  name: "VarIsInitializedOp_72"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/moving_mean"
}
node {
  name: "VarIsInitializedOp_73"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance"
}
node {
  name: "VarIsInitializedOp_74"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/moving_variance"
}
node {
  name: "VarIsInitializedOp_75"
  op: "VarIsInitializedOp"
  input: "normal_block_1/conv2d_4/kernel"
}
node {
  name: "VarIsInitializedOp_76"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/gamma"
}
node {
  name: "VarIsInitializedOp_77"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta"
}
node {
  name: "VarIsInitializedOp_78"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/beta"
}
node {
  name: "VarIsInitializedOp_79"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma"
}
node {
  name: "VarIsInitializedOp_80"
  op: "VarIsInitializedOp"
  input: "transition_block_2/depthwise_conv2d_13/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_81"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma"
}
node {
  name: "VarIsInitializedOp_82"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/beta"
}
node {
  name: "VarIsInitializedOp_83"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/beta"
}
node {
  name: "VarIsInitializedOp_84"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/gamma"
}
node {
  name: "VarIsInitializedOp_85"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/moving_mean"
}
node {
  name: "VarIsInitializedOp_86"
  op: "VarIsInitializedOp"
  input: "transition_block_2/depthwise_conv2d_12/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_87"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/moving_variance"
}
node {
  name: "VarIsInitializedOp_88"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/moving_variance"
}
node {
  name: "VarIsInitializedOp_89"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma"
}
node {
  name: "VarIsInitializedOp_90"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta"
}
node {
  name: "VarIsInitializedOp_91"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/moving_variance"
}
node {
  name: "VarIsInitializedOp_92"
  op: "VarIsInitializedOp"
  input: "normal_block_6/depthwise_conv2d_18/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_93"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/moving_mean"
}
node {
  name: "VarIsInitializedOp_94"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/beta"
}
node {
  name: "VarIsInitializedOp_95"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean"
}
node {
  name: "VarIsInitializedOp_96"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta"
}
node {
  name: "VarIsInitializedOp_97"
  op: "VarIsInitializedOp"
  input: "transition_block_1/depthwise_conv2d_7/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_98"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/moving_mean"
}
node {
  name: "VarIsInitializedOp_99"
  op: "VarIsInitializedOp"
  input: "transition_block_3/conv2d_15/kernel"
}
node {
  name: "VarIsInitializedOp_100"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean"
}
node {
  name: "VarIsInitializedOp_101"
  op: "VarIsInitializedOp"
  input: "normal_block_11/depthwise_conv2d_30/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_102"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_7/moving_variance"
}
node {
  name: "VarIsInitializedOp_103"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/moving_variance"
}
node {
  name: "VarIsInitializedOp_104"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/gamma"
}
node {
  name: "VarIsInitializedOp_105"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/moving_mean"
}
node {
  name: "VarIsInitializedOp_106"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean"
}
node {
  name: "VarIsInitializedOp_107"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/moving_variance"
}
node {
  name: "VarIsInitializedOp_108"
  op: "VarIsInitializedOp"
  input: "normal_block_3/depthwise_conv2d_10/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_109"
  op: "VarIsInitializedOp"
  input: "normal_block_3/batch_normalization_12/moving_mean"
}
node {
  name: "VarIsInitializedOp_110"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta"
}
node {
  name: "VarIsInitializedOp_111"
  op: "VarIsInitializedOp"
  input: "normal_block_5/depthwise_conv2d_17/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_112"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta"
}
node {
  name: "VarIsInitializedOp_113"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_26/moving_mean"
}
node {
  name: "VarIsInitializedOp_114"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/beta"
}
node {
  name: "VarIsInitializedOp_115"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/moving_mean"
}
node {
  name: "VarIsInitializedOp_116"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
}
node {
  name: "VarIsInitializedOp_117"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/gamma"
}
node {
  name: "VarIsInitializedOp_118"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/gamma"
}
node {
  name: "VarIsInitializedOp_119"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/beta"
}
node {
  name: "VarIsInitializedOp_120"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta"
}
node {
  name: "VarIsInitializedOp_121"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/beta"
}
node {
  name: "VarIsInitializedOp_122"
  op: "VarIsInitializedOp"
  input: "normal_block_6/conv2d_13/kernel"
}
node {
  name: "VarIsInitializedOp_123"
  op: "VarIsInitializedOp"
  input: "depthwise_conv2d_32/bias"
}
node {
  name: "VarIsInitializedOp_124"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance"
}
node {
  name: "VarIsInitializedOp_125"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/gamma"
}
node {
  name: "VarIsInitializedOp_126"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean"
}
node {
  name: "VarIsInitializedOp_127"
  op: "VarIsInitializedOp"
  input: "normal_block_2/depthwise_conv2d_9/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_128"
  op: "VarIsInitializedOp"
  input: "transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance"
}
node {
  name: "VarIsInitializedOp_129"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma"
}
node {
  name: "VarIsInitializedOp_130"
  op: "VarIsInitializedOp"
  input: "depthwise_conv2d_32/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_131"
  op: "VarIsInitializedOp"
  input: "normal_block_11/depthwise_conv2d_31/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_132"
  op: "VarIsInitializedOp"
  input: "transition_block/depthwise_conv2d_1/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_133"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/beta"
}
node {
  name: "VarIsInitializedOp_134"
  op: "VarIsInitializedOp"
  input: "normal_block_9/conv2d_18/kernel"
}
node {
  name: "VarIsInitializedOp_135"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance"
}
node {
  name: "VarIsInitializedOp_136"
  op: "VarIsInitializedOp"
  input: "normal_block/conv2d_3/kernel"
}
node {
  name: "VarIsInitializedOp_137"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/beta"
}
node {
  name: "VarIsInitializedOp_138"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance"
}
node {
  name: "VarIsInitializedOp_139"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma"
}
node {
  name: "VarIsInitializedOp_140"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/beta"
}
node {
  name: "VarIsInitializedOp_141"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean"
}
node {
  name: "VarIsInitializedOp_142"
  op: "VarIsInitializedOp"
  input: "normal_block_9/depthwise_conv2d_26/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_143"
  op: "VarIsInitializedOp"
  input: "normal_block_9/batch_normalization_30/moving_variance"
}
node {
  name: "VarIsInitializedOp_144"
  op: "VarIsInitializedOp"
  input: "normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta"
}
node {
  name: "VarIsInitializedOp_145"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization/gamma"
}
node {
  name: "VarIsInitializedOp_146"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/moving_variance"
}
node {
  name: "VarIsInitializedOp_147"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/moving_variance"
}
node {
  name: "VarIsInitializedOp_148"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma"
}
node {
  name: "VarIsInitializedOp_149"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_15/moving_mean"
}
node {
  name: "VarIsInitializedOp_150"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean"
}
node {
  name: "VarIsInitializedOp_151"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/gamma"
}
node {
  name: "VarIsInitializedOp_152"
  op: "VarIsInitializedOp"
  input: "normal_block_5/batch_normalization_19/moving_mean"
}
node {
  name: "VarIsInitializedOp_153"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma"
}
node {
  name: "VarIsInitializedOp_154"
  op: "VarIsInitializedOp"
  input: "transition_block/conv2d_1/kernel"
}
node {
  name: "VarIsInitializedOp_155"
  op: "VarIsInitializedOp"
  input: "transition_block/sub_spectral_normalization/batch_normalization_2/gamma"
}
node {
  name: "VarIsInitializedOp_156"
  op: "VarIsInitializedOp"
  input: "normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean"
}
node {
  name: "VarIsInitializedOp_157"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/moving_variance"
}
node {
  name: "VarIsInitializedOp_158"
  op: "VarIsInitializedOp"
  input: "transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance"
}
node {
  name: "VarIsInitializedOp_159"
  op: "VarIsInitializedOp"
  input: "normal_block_2/conv2d_7/kernel"
}
node {
  name: "VarIsInitializedOp_160"
  op: "VarIsInitializedOp"
  input: "normal_block_7/depthwise_conv2d_21/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_161"
  op: "VarIsInitializedOp"
  input: "normal_block_8/depthwise_conv2d_25/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_162"
  op: "VarIsInitializedOp"
  input: "normal_block_8/conv2d_17/kernel"
}
node {
  name: "VarIsInitializedOp_163"
  op: "VarIsInitializedOp"
  input: "normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta"
}
node {
  name: "VarIsInitializedOp_164"
  op: "VarIsInitializedOp"
  input: "transition_block/depthwise_conv2d/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_165"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/moving_variance"
}
node {
  name: "VarIsInitializedOp_166"
  op: "VarIsInitializedOp"
  input: "normal_block_2/depthwise_conv2d_8/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_167"
  op: "VarIsInitializedOp"
  input: "normal_block_2/batch_normalization_10/moving_mean"
}
node {
  name: "VarIsInitializedOp_168"
  op: "VarIsInitializedOp"
  input: "normal_block_3/conv2d_8/kernel"
}
node {
  name: "VarIsInitializedOp_169"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/beta"
}
node {
  name: "VarIsInitializedOp_170"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance"
}
node {
  name: "VarIsInitializedOp_171"
  op: "VarIsInitializedOp"
  input: "transition_block_1/batch_normalization_8/moving_mean"
}
node {
  name: "VarIsInitializedOp_172"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance"
}
node {
  name: "VarIsInitializedOp_173"
  op: "VarIsInitializedOp"
  input: "transition_block_2/conv2d_9/kernel"
}
node {
  name: "VarIsInitializedOp_174"
  op: "VarIsInitializedOp"
  input: "transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean"
}
node {
  name: "VarIsInitializedOp_175"
  op: "VarIsInitializedOp"
  input: "normal_block_4/depthwise_conv2d_15/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_176"
  op: "VarIsInitializedOp"
  input: "normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta"
}
node {
  name: "VarIsInitializedOp_177"
  op: "VarIsInitializedOp"
  input: "normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean"
}
node {
  name: "VarIsInitializedOp_178"
  op: "VarIsInitializedOp"
  input: "normal_block_7/batch_normalization_23/gamma"
}
node {
  name: "VarIsInitializedOp_179"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance"
}
node {
  name: "VarIsInitializedOp_180"
  op: "VarIsInitializedOp"
  input: "normal_block_11/batch_normalization_34/gamma"
}
node {
  name: "VarIsInitializedOp_181"
  op: "VarIsInitializedOp"
  input: "normal_block/batch_normalization_3/beta"
}
node {
  name: "VarIsInitializedOp_182"
  op: "VarIsInitializedOp"
  input: "normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean"
}
node {
  name: "VarIsInitializedOp_183"
  op: "VarIsInitializedOp"
  input: "normal_block_4/batch_normalization_17/beta"
}
node {
  name: "VarIsInitializedOp_184"
  op: "VarIsInitializedOp"
  input: "normal_block_5/conv2d_12/kernel"
}
node {
  name: "VarIsInitializedOp_185"
  op: "VarIsInitializedOp"
  input: "transition_block_3/batch_normalization_25/beta"
}
node {
  name: "VarIsInitializedOp_186"
  op: "VarIsInitializedOp"
  input: "transition_block/batch_normalization_1/beta"
}
node {
  name: "VarIsInitializedOp_187"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma"
}
node {
  name: "VarIsInitializedOp_188"
  op: "VarIsInitializedOp"
  input: "normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta"
}
node {
  name: "VarIsInitializedOp_189"
  op: "VarIsInitializedOp"
  input: "normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean"
}
node {
  name: "VarIsInitializedOp_190"
  op: "VarIsInitializedOp"
  input: "normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance"
}
node {
  name: "VarIsInitializedOp_191"
  op: "VarIsInitializedOp"
  input: "normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta"
}
node {
  name: "VarIsInitializedOp_192"
  op: "VarIsInitializedOp"
  input: "normal_block_10/batch_normalization_32/gamma"
}
node {
  name: "VarIsInitializedOp_193"
  op: "VarIsInitializedOp"
  input: "normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta"
}
node {
  name: "VarIsInitializedOp_194"
  op: "VarIsInitializedOp"
  input: "normal_block_1/batch_normalization_5/beta"
}
node {
  name: "VarIsInitializedOp_195"
  op: "VarIsInitializedOp"
  input: "transition_block_2/batch_normalization_14/gamma"
}
node {
  name: "VarIsInitializedOp_196"
  op: "VarIsInitializedOp"
  input: "normal_block/sub_spectral_normalization_1/batch_normalization_4/beta"
}
node {
  name: "VarIsInitializedOp_197"
  op: "VarIsInitializedOp"
  input: "normal_block_6/batch_normalization_21/gamma"
}
node {
  name: "VarIsInitializedOp_198"
  op: "VarIsInitializedOp"
  input: "normal_block_8/depthwise_conv2d_24/depthwise_kernel"
}
node {
  name: "VarIsInitializedOp_199"
  op: "VarIsInitializedOp"
  input: "normal_block_8/batch_normalization_28/moving_variance"
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv2d/bias/Assign"
  input: "^conv2d/kernel/Assign"
  input: "^depthwise_conv2d_32/bias/Assign"
  input: "^depthwise_conv2d_32/depthwise_kernel/Assign"
  input: "^normal_block/batch_normalization_3/beta/Assign"
  input: "^normal_block/batch_normalization_3/gamma/Assign"
  input: "^normal_block/batch_normalization_3/moving_mean/Assign"
  input: "^normal_block/batch_normalization_3/moving_variance/Assign"
  input: "^normal_block/conv2d_3/kernel/Assign"
  input: "^normal_block/depthwise_conv2d_2/depthwise_kernel/Assign"
  input: "^normal_block/depthwise_conv2d_3/depthwise_kernel/Assign"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/beta/Assign"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/gamma/Assign"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_mean/Assign"
  input: "^normal_block/sub_spectral_normalization_1/batch_normalization_4/moving_variance/Assign"
  input: "^normal_block_1/batch_normalization_5/beta/Assign"
  input: "^normal_block_1/batch_normalization_5/gamma/Assign"
  input: "^normal_block_1/batch_normalization_5/moving_mean/Assign"
  input: "^normal_block_1/batch_normalization_5/moving_variance/Assign"
  input: "^normal_block_1/conv2d_4/kernel/Assign"
  input: "^normal_block_1/depthwise_conv2d_4/depthwise_kernel/Assign"
  input: "^normal_block_1/depthwise_conv2d_5/depthwise_kernel/Assign"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/beta/Assign"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/gamma/Assign"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_mean/Assign"
  input: "^normal_block_1/sub_spectral_normalization_2/batch_normalization_6/moving_variance/Assign"
  input: "^normal_block_10/batch_normalization_32/beta/Assign"
  input: "^normal_block_10/batch_normalization_32/gamma/Assign"
  input: "^normal_block_10/batch_normalization_32/moving_mean/Assign"
  input: "^normal_block_10/batch_normalization_32/moving_variance/Assign"
  input: "^normal_block_10/conv2d_19/kernel/Assign"
  input: "^normal_block_10/depthwise_conv2d_28/depthwise_kernel/Assign"
  input: "^normal_block_10/depthwise_conv2d_29/depthwise_kernel/Assign"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/beta/Assign"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/gamma/Assign"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_mean/Assign"
  input: "^normal_block_10/sub_spectral_normalization_14/batch_normalization_33/moving_variance/Assign"
  input: "^normal_block_11/batch_normalization_34/beta/Assign"
  input: "^normal_block_11/batch_normalization_34/gamma/Assign"
  input: "^normal_block_11/batch_normalization_34/moving_mean/Assign"
  input: "^normal_block_11/batch_normalization_34/moving_variance/Assign"
  input: "^normal_block_11/conv2d_20/kernel/Assign"
  input: "^normal_block_11/depthwise_conv2d_30/depthwise_kernel/Assign"
  input: "^normal_block_11/depthwise_conv2d_31/depthwise_kernel/Assign"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/beta/Assign"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/gamma/Assign"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_mean/Assign"
  input: "^normal_block_11/sub_spectral_normalization_15/batch_normalization_35/moving_variance/Assign"
  input: "^normal_block_2/batch_normalization_10/beta/Assign"
  input: "^normal_block_2/batch_normalization_10/gamma/Assign"
  input: "^normal_block_2/batch_normalization_10/moving_mean/Assign"
  input: "^normal_block_2/batch_normalization_10/moving_variance/Assign"
  input: "^normal_block_2/conv2d_7/kernel/Assign"
  input: "^normal_block_2/depthwise_conv2d_8/depthwise_kernel/Assign"
  input: "^normal_block_2/depthwise_conv2d_9/depthwise_kernel/Assign"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/beta/Assign"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/gamma/Assign"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_mean/Assign"
  input: "^normal_block_2/sub_spectral_normalization_4/batch_normalization_11/moving_variance/Assign"
  input: "^normal_block_3/batch_normalization_12/beta/Assign"
  input: "^normal_block_3/batch_normalization_12/gamma/Assign"
  input: "^normal_block_3/batch_normalization_12/moving_mean/Assign"
  input: "^normal_block_3/batch_normalization_12/moving_variance/Assign"
  input: "^normal_block_3/conv2d_8/kernel/Assign"
  input: "^normal_block_3/depthwise_conv2d_10/depthwise_kernel/Assign"
  input: "^normal_block_3/depthwise_conv2d_11/depthwise_kernel/Assign"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/beta/Assign"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/gamma/Assign"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_mean/Assign"
  input: "^normal_block_3/sub_spectral_normalization_5/batch_normalization_13/moving_variance/Assign"
  input: "^normal_block_4/batch_normalization_17/beta/Assign"
  input: "^normal_block_4/batch_normalization_17/gamma/Assign"
  input: "^normal_block_4/batch_normalization_17/moving_mean/Assign"
  input: "^normal_block_4/batch_normalization_17/moving_variance/Assign"
  input: "^normal_block_4/conv2d_11/kernel/Assign"
  input: "^normal_block_4/depthwise_conv2d_14/depthwise_kernel/Assign"
  input: "^normal_block_4/depthwise_conv2d_15/depthwise_kernel/Assign"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/beta/Assign"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/gamma/Assign"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_mean/Assign"
  input: "^normal_block_4/sub_spectral_normalization_7/batch_normalization_18/moving_variance/Assign"
  input: "^normal_block_5/batch_normalization_19/beta/Assign"
  input: "^normal_block_5/batch_normalization_19/gamma/Assign"
  input: "^normal_block_5/batch_normalization_19/moving_mean/Assign"
  input: "^normal_block_5/batch_normalization_19/moving_variance/Assign"
  input: "^normal_block_5/conv2d_12/kernel/Assign"
  input: "^normal_block_5/depthwise_conv2d_16/depthwise_kernel/Assign"
  input: "^normal_block_5/depthwise_conv2d_17/depthwise_kernel/Assign"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/beta/Assign"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/gamma/Assign"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_mean/Assign"
  input: "^normal_block_5/sub_spectral_normalization_8/batch_normalization_20/moving_variance/Assign"
  input: "^normal_block_6/batch_normalization_21/beta/Assign"
  input: "^normal_block_6/batch_normalization_21/gamma/Assign"
  input: "^normal_block_6/batch_normalization_21/moving_mean/Assign"
  input: "^normal_block_6/batch_normalization_21/moving_variance/Assign"
  input: "^normal_block_6/conv2d_13/kernel/Assign"
  input: "^normal_block_6/depthwise_conv2d_18/depthwise_kernel/Assign"
  input: "^normal_block_6/depthwise_conv2d_19/depthwise_kernel/Assign"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/beta/Assign"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/gamma/Assign"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_mean/Assign"
  input: "^normal_block_6/sub_spectral_normalization_9/batch_normalization_22/moving_variance/Assign"
  input: "^normal_block_7/batch_normalization_23/beta/Assign"
  input: "^normal_block_7/batch_normalization_23/gamma/Assign"
  input: "^normal_block_7/batch_normalization_23/moving_mean/Assign"
  input: "^normal_block_7/batch_normalization_23/moving_variance/Assign"
  input: "^normal_block_7/conv2d_14/kernel/Assign"
  input: "^normal_block_7/depthwise_conv2d_20/depthwise_kernel/Assign"
  input: "^normal_block_7/depthwise_conv2d_21/depthwise_kernel/Assign"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/beta/Assign"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/gamma/Assign"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_mean/Assign"
  input: "^normal_block_7/sub_spectral_normalization_10/batch_normalization_24/moving_variance/Assign"
  input: "^normal_block_8/batch_normalization_28/beta/Assign"
  input: "^normal_block_8/batch_normalization_28/gamma/Assign"
  input: "^normal_block_8/batch_normalization_28/moving_mean/Assign"
  input: "^normal_block_8/batch_normalization_28/moving_variance/Assign"
  input: "^normal_block_8/conv2d_17/kernel/Assign"
  input: "^normal_block_8/depthwise_conv2d_24/depthwise_kernel/Assign"
  input: "^normal_block_8/depthwise_conv2d_25/depthwise_kernel/Assign"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/beta/Assign"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/gamma/Assign"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_mean/Assign"
  input: "^normal_block_8/sub_spectral_normalization_12/batch_normalization_29/moving_variance/Assign"
  input: "^normal_block_9/batch_normalization_30/beta/Assign"
  input: "^normal_block_9/batch_normalization_30/gamma/Assign"
  input: "^normal_block_9/batch_normalization_30/moving_mean/Assign"
  input: "^normal_block_9/batch_normalization_30/moving_variance/Assign"
  input: "^normal_block_9/conv2d_18/kernel/Assign"
  input: "^normal_block_9/depthwise_conv2d_26/depthwise_kernel/Assign"
  input: "^normal_block_9/depthwise_conv2d_27/depthwise_kernel/Assign"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/beta/Assign"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/gamma/Assign"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_mean/Assign"
  input: "^normal_block_9/sub_spectral_normalization_13/batch_normalization_31/moving_variance/Assign"
  input: "^transition_block/batch_normalization/beta/Assign"
  input: "^transition_block/batch_normalization/gamma/Assign"
  input: "^transition_block/batch_normalization/moving_mean/Assign"
  input: "^transition_block/batch_normalization/moving_variance/Assign"
  input: "^transition_block/batch_normalization_1/beta/Assign"
  input: "^transition_block/batch_normalization_1/gamma/Assign"
  input: "^transition_block/batch_normalization_1/moving_mean/Assign"
  input: "^transition_block/batch_normalization_1/moving_variance/Assign"
  input: "^transition_block/conv2d_1/kernel/Assign"
  input: "^transition_block/conv2d_2/kernel/Assign"
  input: "^transition_block/depthwise_conv2d/depthwise_kernel/Assign"
  input: "^transition_block/depthwise_conv2d_1/depthwise_kernel/Assign"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/beta/Assign"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/gamma/Assign"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/moving_mean/Assign"
  input: "^transition_block/sub_spectral_normalization/batch_normalization_2/moving_variance/Assign"
  input: "^transition_block_1/batch_normalization_7/beta/Assign"
  input: "^transition_block_1/batch_normalization_7/gamma/Assign"
  input: "^transition_block_1/batch_normalization_7/moving_mean/Assign"
  input: "^transition_block_1/batch_normalization_7/moving_variance/Assign"
  input: "^transition_block_1/batch_normalization_8/beta/Assign"
  input: "^transition_block_1/batch_normalization_8/gamma/Assign"
  input: "^transition_block_1/batch_normalization_8/moving_mean/Assign"
  input: "^transition_block_1/batch_normalization_8/moving_variance/Assign"
  input: "^transition_block_1/conv2d_5/kernel/Assign"
  input: "^transition_block_1/conv2d_6/kernel/Assign"
  input: "^transition_block_1/depthwise_conv2d_6/depthwise_kernel/Assign"
  input: "^transition_block_1/depthwise_conv2d_7/depthwise_kernel/Assign"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/beta/Assign"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/gamma/Assign"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_mean/Assign"
  input: "^transition_block_1/sub_spectral_normalization_3/batch_normalization_9/moving_variance/Assign"
  input: "^transition_block_2/batch_normalization_14/beta/Assign"
  input: "^transition_block_2/batch_normalization_14/gamma/Assign"
  input: "^transition_block_2/batch_normalization_14/moving_mean/Assign"
  input: "^transition_block_2/batch_normalization_14/moving_variance/Assign"
  input: "^transition_block_2/batch_normalization_15/beta/Assign"
  input: "^transition_block_2/batch_normalization_15/gamma/Assign"
  input: "^transition_block_2/batch_normalization_15/moving_mean/Assign"
  input: "^transition_block_2/batch_normalization_15/moving_variance/Assign"
  input: "^transition_block_2/conv2d_10/kernel/Assign"
  input: "^transition_block_2/conv2d_9/kernel/Assign"
  input: "^transition_block_2/depthwise_conv2d_12/depthwise_kernel/Assign"
  input: "^transition_block_2/depthwise_conv2d_13/depthwise_kernel/Assign"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/beta/Assign"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/gamma/Assign"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_mean/Assign"
  input: "^transition_block_2/sub_spectral_normalization_6/batch_normalization_16/moving_variance/Assign"
  input: "^transition_block_3/batch_normalization_25/beta/Assign"
  input: "^transition_block_3/batch_normalization_25/gamma/Assign"
  input: "^transition_block_3/batch_normalization_25/moving_mean/Assign"
  input: "^transition_block_3/batch_normalization_25/moving_variance/Assign"
  input: "^transition_block_3/batch_normalization_26/beta/Assign"
  input: "^transition_block_3/batch_normalization_26/gamma/Assign"
  input: "^transition_block_3/batch_normalization_26/moving_mean/Assign"
  input: "^transition_block_3/batch_normalization_26/moving_variance/Assign"
  input: "^transition_block_3/conv2d_15/kernel/Assign"
  input: "^transition_block_3/conv2d_16/kernel/Assign"
  input: "^transition_block_3/depthwise_conv2d_22/depthwise_kernel/Assign"
  input: "^transition_block_3/depthwise_conv2d_23/depthwise_kernel/Assign"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/beta/Assign"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/gamma/Assign"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_mean/Assign"
  input: "^transition_block_3/sub_spectral_normalization_11/batch_normalization_27/moving_variance/Assign"
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3396831154823303
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3396831154823303
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "W\372s\013\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
}
node {
  name: "conv2d_21/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_21/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_21/kernel"
    }
  }
}
node {
  name: "conv2d_21/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_21/kernel"
}
node {
  name: "conv2d_21/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_21/kernel"
  input: "conv2d_21/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_21/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_21/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_21/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_21/Conv2D"
  op: "Conv2D"
  input: "Mean"
  input: "conv2d_21/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "global_average_pooling2d/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "global_average_pooling2d/Mean"
  op: "Mean"
  input: "conv2d_21/Conv2D"
  input: "global_average_pooling2d/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.36927446722984314
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.36927446722984314
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\367\002d\035\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  op: "StatelessRandomGetKeyCounter"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter/seed"
  attr {
    key: "Tseed"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  op: "StatelessRandomUniformV2"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/shape"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomGetKeyCounter:1"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2/alg"
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/sub"
  op: "Sub"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/max"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform/mul"
  op: "Mul"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/StatelessRandomUniformV2"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel/Initializer/stateless_random_uniform"
  op: "AddV2"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/mul"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
}
node {
  name: "conv2d_22/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_22/kernel"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d_22/kernel"
    }
  }
}
node {
  name: "conv2d_22/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d_22/kernel"
}
node {
  name: "conv2d_22/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d_22/kernel"
  input: "conv2d_22/kernel/Initializer/stateless_random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "conv2d_22/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_22/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d_22/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_22/Conv2D"
  op: "Conv2D"
  input: "global_average_pooling2d/Mean"
  input: "conv2d_22/Conv2D/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "conv2d_22/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "tf_op_layer_Squeeze_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "total"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@total"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "total"
    }
  }
}
node {
  name: "total/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "total"
}
node {
  name: "total/Assign"
  op: "AssignVariableOp"
  input: "total"
  input: "total/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "total/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "count"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@count"
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "count"
    }
  }
}
node {
  name: "count/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "count"
}
node {
  name: "count/Assign"
  op: "AssignVariableOp"
  input: "count"
  input: "count/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: false
    }
  }
}
node {
  name: "count/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "count"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Shape"
  op: "Shape"
  input: "tf_op_layer_Squeeze_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Squeeze"
  op: "Squeeze"
  input: "tf_op_layer_Squeeze_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/accuracy/ArgMax"
  op: "ArgMax"
  input: "Squeeze"
  input: "metrics/accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/accuracy/Cast"
  op: "Cast"
  input: "metrics/accuracy/ArgMax"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Equal"
  op: "Equal"
  input: "metrics/accuracy/Squeeze"
  input: "metrics/accuracy/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/accuracy/Cast_1"
  op: "Cast"
  input: "metrics/accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/Reshape"
  op: "Reshape"
  input: "metrics/accuracy/Cast_1"
  input: "metrics/accuracy/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "metrics/accuracy/Sum"
  op: "Sum"
  input: "metrics/accuracy/Reshape"
  input: "metrics/accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "total"
  input: "metrics/accuracy/Sum"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/Sum"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Size"
  op: "Size"
  input: "metrics/accuracy/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "metrics/accuracy/Cast_2"
  op: "Cast"
  input: "metrics/accuracy/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/accuracy/AssignAddVariableOp_1"
  op: "AssignAddVariableOp"
  input: "count"
  input: "metrics/accuracy/Cast_2"
  input: "^metrics/accuracy/AssignAddVariableOp"
  attr {
    key: "_has_manual_control_dependencies"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp"
  op: "ReadVariableOp"
  input: "total"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "count"
  input: "^metrics/accuracy/AssignAddVariableOp_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/div_no_nan"
  op: "DivNoNan"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp"
  input: "metrics/accuracy/div_no_nan/ReadVariableOp_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/accuracy/Identity"
  op: "Identity"
  input: "metrics/accuracy/div_no_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Cast"
  op: "Cast"
  input: "tf_op_layer_Squeeze_target"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Reshape"
  op: "Reshape"
  input: "loss/tf_op_layer_Squeeze_loss/Cast"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/strided_slice"
  op: "StridedSlice"
  input: "loss/tf_op_layer_Squeeze_loss/Shape"
  input: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack"
  input: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack_1"
  input: "loss/tf_op_layer_Squeeze_loss/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Reshape_1/shape/0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Reshape_1/shape"
  op: "Pack"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape_1/shape/0"
  input: "loss/tf_op_layer_Squeeze_loss/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Reshape_1"
  op: "Reshape"
  input: "Squeeze"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape_1"
  input: "loss/tf_op_layer_Squeeze_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/weighted_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/weighted_loss/Mul"
  op: "Mul"
  input: "loss/tf_op_layer_Squeeze_loss/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "loss/tf_op_layer_Squeeze_loss/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Sum"
  op: "Sum"
  input: "loss/tf_op_layer_Squeeze_loss/weighted_loss/Mul"
  input: "loss/tf_op_layer_Squeeze_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/num_elements"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/num_elements/Cast"
  op: "Cast"
  input: "loss/tf_op_layer_Squeeze_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/range"
  op: "Range"
  input: "loss/tf_op_layer_Squeeze_loss/range/start"
  input: "loss/tf_op_layer_Squeeze_loss/Rank"
  input: "loss/tf_op_layer_Squeeze_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/Sum_1"
  op: "Sum"
  input: "loss/tf_op_layer_Squeeze_loss/Sum"
  input: "loss/tf_op_layer_Squeeze_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tf_op_layer_Squeeze_loss/value"
  op: "DivNoNan"
  input: "loss/tf_op_layer_Squeeze_loss/Sum_1"
  input: "loss/tf_op_layer_Squeeze_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/tf_op_layer_Squeeze_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
library {
  function {
    signature {
      name: "normal_block_7_batch_normalization_23_cond_true_4873"
      input_arg {
        name: "readvariableop_normal_block_7_batch_normalization_23_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_7_batch_normalization_23_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_7_batch_normalization_23_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_7_batch_normalization_23_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_7_depthwise_conv2d_21_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_7_batch_normalization_23_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_7_batch_normalization_23_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_7_batch_normalization_23_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_7_batch_normalization_23_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_7_depthwise_conv2d_21_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_1_batch_normalization_5_cond_1_false_1398"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_spatial_dropout2d_1_cond_false_1049"
      input_arg {
        name: "identity_normal_block_conv2d_3_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_conv2d_3_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_false_4730"
      input_arg {
        name: "readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_7_sub_spectral_normalization_10_reshape_20_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_7_sub_spectral_normalization_10_reshape_20_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_1_true_5743"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_1_batch_normalization_5_cond_1_true_1397"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_15_cond_true_3222"
      input_arg {
        name: "readvariableop_transition_block_2_batch_normalization_15_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_batch_normalization_15_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_15_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_15_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_depthwise_conv2d_13_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_batch_normalization_15_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_batch_normalization_15_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_15_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_15_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_depthwise_conv2d_13_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_true_410"
      input_arg {
        name: "readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_sub_spectral_normalization_reshape_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_sub_spectral_normalization_reshape_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_spatial_dropout2d_14_cond_true_6757"
      input_arg {
        name: "dropout_mul_normal_block_10_conv2d_19_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_10_conv2d_19_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_1_spatial_dropout2d_2_cond_true_1441"
      input_arg {
        name: "dropout_mul_normal_block_1_conv2d_4_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_1_conv2d_4_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_true_6501"
      input_arg {
        name: "readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_10_sub_spectral_normalization_14_reshape_28_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_10_sub_spectral_normalization_14_reshape_28_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_1_false_6157"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_4_batch_normalization_17_cond_1_false_3703"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_7_spatial_dropout2d_10_cond_false_4986"
      input_arg {
        name: "identity_normal_block_7_conv2d_14_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_7_conv2d_14_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_spatial_dropout2d_11_cond_false_5520"
      input_arg {
        name: "identity_transition_block_3_conv2d_16_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_transition_block_3_conv2d_16_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_1_spatial_dropout2d_3_cond_true_1975"
      input_arg {
        name: "dropout_mul_transition_block_1_conv2d_6_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\014\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_transition_block_1_conv2d_6_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_1_true_478"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_25_cond_1_false_5189"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_5_spatial_dropout2d_8_cond_false_4160"
      input_arg {
        name: "identity_normal_block_5_conv2d_12_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_5_conv2d_12_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_batch_normalization_28_cond_true_5819"
      input_arg {
        name: "readvariableop_normal_block_8_batch_normalization_28_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_8_batch_normalization_28_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_8_batch_normalization_28_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_8_batch_normalization_28_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_8_depthwise_conv2d_25_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_8_batch_normalization_28_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_8_batch_normalization_28_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_8_batch_normalization_28_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_8_batch_normalization_28_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_8_depthwise_conv2d_25_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_cond_1_true_345"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_false_6502"
      input_arg {
        name: "readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_10_sub_spectral_normalization_14_reshape_28_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_10_sub_spectral_normalization_14_batch_normalization_33_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_10_sub_spectral_normalization_14_reshape_28_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_true_5675"
      input_arg {
        name: "readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_8_sub_spectral_normalization_12_reshape_24_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_8_sub_spectral_normalization_12_reshape_24_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_25_cond_1_true_5188"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_26_cond_true_5407"
      input_arg {
        name: "readvariableop_transition_block_3_batch_normalization_26_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_batch_normalization_26_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_26_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_26_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_depthwise_conv2d_23_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_batch_normalization_26_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_batch_normalization_26_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_26_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_26_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_depthwise_conv2d_23_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_3_batch_normalization_12_cond_1_false_2757"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_14_cond_true_2935"
      input_arg {
        name: "readvariableop_transition_block_2_batch_normalization_14_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_batch_normalization_14_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_14_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_14_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_conv2d_9_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_batch_normalization_14_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_batch_normalization_14_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_14_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_14_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_conv2d_9_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 5
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_false_4317"
      input_arg {
        name: "readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_6_sub_spectral_normalization_9_reshape_18_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_6_sub_spectral_normalization_9_reshape_18_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_false_3491"
      input_arg {
        name: "readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_4_sub_spectral_normalization_7_reshape_14_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_4_sub_spectral_normalization_7_reshape_14_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_1_false_2613"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_8_batch_normalization_28_cond_1_true_5887"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_9_batch_normalization_30_cond_1_true_6300"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_cond_false_278"
      input_arg {
        name: "readvariableop_transition_block_batch_normalization_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_conv2d_1_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_batch_normalization_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_conv2d_1_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 20
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_spatial_dropout2d_cond_false_657"
      input_arg {
        name: "identity_transition_block_conv2d_2_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_transition_block_conv2d_2_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_1_true_4797"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_1_false_2200"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_26_cond_1_true_5475"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_9_batch_normalization_30_cond_true_6232"
      input_arg {
        name: "readvariableop_normal_block_9_batch_normalization_30_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_9_batch_normalization_30_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_9_batch_normalization_30_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_9_batch_normalization_30_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_9_depthwise_conv2d_27_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_9_batch_normalization_30_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_9_batch_normalization_30_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_9_batch_normalization_30_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_9_batch_normalization_30_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_9_depthwise_conv2d_27_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_8_cond_1_false_1932"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_1_false_1788"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_4_spatial_dropout2d_7_cond_true_3746"
      input_arg {
        name: "dropout_mul_normal_block_4_conv2d_11_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_4_conv2d_11_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_4_batch_normalization_17_cond_false_3635"
      input_arg {
        name: "readvariableop_normal_block_4_batch_normalization_17_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_4_batch_normalization_17_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_4_batch_normalization_17_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_4_batch_normalization_17_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_4_depthwise_conv2d_15_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_4_batch_normalization_17_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_4_batch_normalization_17_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_4_batch_normalization_17_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_4_batch_normalization_17_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_4_depthwise_conv2d_15_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_1_true_4384"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_1_true_6569"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_1_false_871"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_spatial_dropout2d_4_cond_false_2388"
      input_arg {
        name: "identity_normal_block_2_conv2d_7_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_2_conv2d_7_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_3_batch_normalization_12_cond_true_2688"
      input_arg {
        name: "readvariableop_normal_block_3_batch_normalization_12_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_3_batch_normalization_12_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_3_batch_normalization_12_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_3_batch_normalization_12_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_3_depthwise_conv2d_11_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_3_batch_normalization_12_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_3_batch_normalization_12_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_3_batch_normalization_12_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_3_batch_normalization_12_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_3_depthwise_conv2d_11_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_11_spatial_dropout2d_15_cond_false_7171"
      input_arg {
        name: "identity_normal_block_11_conv2d_20_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_11_conv2d_20_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_spatial_dropout2d_10_cond_true_4985"
      input_arg {
        name: "dropout_mul_normal_block_7_conv2d_14_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_7_conv2d_14_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_batch_normalization_3_cond_1_true_1004"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_15_cond_1_true_3290"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_false_6089"
      input_arg {
        name: "readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_9_sub_spectral_normalization_13_reshape_26_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_9_sub_spectral_normalization_13_reshape_26_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_batch_normalization_21_cond_1_true_4528"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_1_true_3971"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_8_cond_1_true_1931"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_7_cond_true_1576"
      input_arg {
        name: "readvariableop_transition_block_1_batch_normalization_7_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_batch_normalization_7_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_7_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_7_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_conv2d_5_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_batch_normalization_7_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_batch_normalization_7_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_7_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_7_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_conv2d_5_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 10
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_1_false_3147"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_3_batch_normalization_12_cond_1_true_2756"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_true_4729"
      input_arg {
        name: "readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_7_sub_spectral_normalization_10_reshape_20_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_7_sub_spectral_normalization_10_batch_normalization_24_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_7_sub_spectral_normalization_10_reshape_20_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_1_spatial_dropout2d_2_cond_false_1442"
      input_arg {
        name: "identity_normal_block_1_conv2d_4_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_1_conv2d_4_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_true_2131"
      input_arg {
        name: "readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_2_sub_spectral_normalization_4_reshape_8_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_2_sub_spectral_normalization_4_reshape_8_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_batch_normalization_30_cond_1_false_6301"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_11_batch_normalization_34_cond_false_7059"
      input_arg {
        name: "readvariableop_normal_block_11_batch_normalization_34_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_11_batch_normalization_34_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_11_batch_normalization_34_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_11_batch_normalization_34_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_11_depthwise_conv2d_31_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_11_batch_normalization_34_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_11_batch_normalization_34_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_11_batch_normalization_34_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_11_batch_normalization_34_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_11_depthwise_conv2d_31_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_1_batch_normalization_5_cond_false_1330"
      input_arg {
        name: "readvariableop_normal_block_1_batch_normalization_5_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_1_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_1_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_1_depthwise_conv2d_5_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_1_batch_normalization_5_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_1_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_1_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_1_depthwise_conv2d_5_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_batch_normalization_32_cond_false_6646"
      input_arg {
        name: "readvariableop_normal_block_10_batch_normalization_32_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_10_batch_normalization_32_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_10_batch_normalization_32_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_10_batch_normalization_32_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_10_depthwise_conv2d_29_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_10_batch_normalization_32_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_10_batch_normalization_32_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_10_batch_normalization_32_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_10_batch_normalization_32_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_10_depthwise_conv2d_29_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_8_cond_false_1864"
      input_arg {
        name: "readvariableop_transition_block_1_batch_normalization_8_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_batch_normalization_8_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_8_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_8_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_depthwise_conv2d_7_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_batch_normalization_8_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_batch_normalization_8_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_8_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_8_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_depthwise_conv2d_7_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_true_2544"
      input_arg {
        name: "readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_3_sub_spectral_normalization_5_reshape_10_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_3_sub_spectral_normalization_5_reshape_10_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_false_3079"
      input_arg {
        name: "readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_sub_spectral_normalization_6_reshape_12_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_sub_spectral_normalization_6_reshape_12_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_true_4316"
      input_arg {
        name: "readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_6_sub_spectral_normalization_9_reshape_18_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_6_sub_spectral_normalization_9_batch_normalization_22_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_6_sub_spectral_normalization_9_reshape_18_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_1_true_870"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_false_2545"
      input_arg {
        name: "readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_3_sub_spectral_normalization_5_reshape_10_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_3_sub_spectral_normalization_5_batch_normalization_13_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_3_sub_spectral_normalization_5_reshape_10_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_14_cond_1_false_3004"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_batch_normalization_3_cond_true_936"
      input_arg {
        name: "readvariableop_normal_block_batch_normalization_3_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_depthwise_conv2d_3_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_batch_normalization_3_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_depthwise_conv2d_3_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_batch_normalization_32_cond_1_true_6713"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_false_2132"
      input_arg {
        name: "readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_2_sub_spectral_normalization_4_reshape_8_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_2_sub_spectral_normalization_4_batch_normalization_11_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_2_sub_spectral_normalization_4_reshape_8_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_25_cond_true_5120"
      input_arg {
        name: "readvariableop_transition_block_3_batch_normalization_25_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_batch_normalization_25_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_25_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_25_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_conv2d_15_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_batch_normalization_25_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_batch_normalization_25_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_25_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_25_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_conv2d_15_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 5
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_cond_1_false_346"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_8_cond_true_1863"
      input_arg {
        name: "readvariableop_transition_block_1_batch_normalization_8_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_batch_normalization_8_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_8_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_8_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_depthwise_conv2d_7_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_batch_normalization_8_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_batch_normalization_8_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_8_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_8_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_depthwise_conv2d_7_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_false_1720"
      input_arg {
        name: "readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_sub_spectral_normalization_3_reshape_6_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_sub_spectral_normalization_3_reshape_6_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_14_cond_false_2936"
      input_arg {
        name: "readvariableop_transition_block_2_batch_normalization_14_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_batch_normalization_14_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_14_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_14_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_conv2d_9_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_batch_normalization_14_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_batch_normalization_14_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_14_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_14_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_conv2d_9_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 5
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_1_true_6156"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_true_1719"
      input_arg {
        name: "readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_sub_spectral_normalization_3_reshape_6_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_sub_spectral_normalization_3_batch_normalization_9_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_sub_spectral_normalization_3_reshape_6_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 2
                }
                dim {
                  size: 60
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_batch_normalization_19_cond_1_false_4116"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_3_spatial_dropout2d_5_cond_true_2800"
      input_arg {
        name: "dropout_mul_normal_block_3_conv2d_8_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\014\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_3_conv2d_8_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_false_3904"
      input_arg {
        name: "readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_5_sub_spectral_normalization_8_reshape_16_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_5_sub_spectral_normalization_8_reshape_16_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_25_cond_false_5121"
      input_arg {
        name: "readvariableop_transition_block_3_batch_normalization_25_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_batch_normalization_25_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_25_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_25_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_conv2d_15_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_batch_normalization_25_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_batch_normalization_25_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_25_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_25_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_conv2d_15_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 5
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_batch_normalization_32_cond_true_6645"
      input_arg {
        name: "readvariableop_normal_block_10_batch_normalization_32_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_10_batch_normalization_32_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_10_batch_normalization_32_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_10_batch_normalization_32_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_10_depthwise_conv2d_29_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_10_batch_normalization_32_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_10_batch_normalization_32_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_10_batch_normalization_32_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_10_batch_normalization_32_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_10_depthwise_conv2d_29_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_11_batch_normalization_34_cond_1_false_7127"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_2_spatial_dropout2d_6_cond_false_3335"
      input_arg {
        name: "identity_transition_block_2_conv2d_10_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_transition_block_2_conv2d_10_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_15_cond_false_3223"
      input_arg {
        name: "readvariableop_transition_block_2_batch_normalization_15_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_batch_normalization_15_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_15_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_15_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_depthwise_conv2d_13_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_batch_normalization_15_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_batch_normalization_15_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_batch_normalization_15_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_batch_normalization_15_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_depthwise_conv2d_13_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_26_cond_1_false_5476"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_4_batch_normalization_17_cond_1_true_3702"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_7_batch_normalization_23_cond_false_4874"
      input_arg {
        name: "readvariableop_normal_block_7_batch_normalization_23_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_7_batch_normalization_23_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_7_batch_normalization_23_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_7_batch_normalization_23_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_7_depthwise_conv2d_21_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_7_batch_normalization_23_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_7_batch_normalization_23_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_7_batch_normalization_23_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_7_batch_normalization_23_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_7_depthwise_conv2d_21_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_batch_normalization_19_cond_false_4048"
      input_arg {
        name: "readvariableop_normal_block_5_batch_normalization_19_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_5_batch_normalization_19_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_5_batch_normalization_19_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_5_batch_normalization_19_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_5_depthwise_conv2d_17_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_5_batch_normalization_19_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_5_batch_normalization_19_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_5_batch_normalization_19_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_5_batch_normalization_19_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_5_depthwise_conv2d_17_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_spatial_dropout2d_13_cond_true_6344"
      input_arg {
        name: "dropout_mul_normal_block_9_conv2d_18_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_9_conv2d_18_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_sub_spectral_normalization_13_batch_normalization_31_cond_true_6088"
      input_arg {
        name: "readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_9_sub_spectral_normalization_13_reshape_26_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_9_sub_spectral_normalization_13_batch_normalization_31_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_9_sub_spectral_normalization_13_reshape_26_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_spatial_dropout2d_cond_true_656"
      input_arg {
        name: "dropout_mul_transition_block_conv2d_2_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_transition_block_conv2d_2_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_sub_spectral_normalization_9_batch_normalization_22_cond_1_false_4385"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_10_batch_normalization_32_cond_1_false_6714"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_5_batch_normalization_19_cond_1_true_4115"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_11_batch_normalization_34_cond_true_7058"
      input_arg {
        name: "readvariableop_normal_block_11_batch_normalization_34_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_11_batch_normalization_34_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_11_batch_normalization_34_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_11_batch_normalization_34_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_11_depthwise_conv2d_31_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_11_batch_normalization_34_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_11_batch_normalization_34_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_11_batch_normalization_34_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_11_batch_normalization_34_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_11_depthwise_conv2d_31_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_2_batch_normalization_10_cond_false_2276"
      input_arg {
        name: "readvariableop_normal_block_2_batch_normalization_10_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_2_batch_normalization_10_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_2_batch_normalization_10_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_2_batch_normalization_10_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_2_depthwise_conv2d_9_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_2_batch_normalization_10_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_2_batch_normalization_10_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_2_batch_normalization_10_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_2_batch_normalization_10_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_2_depthwise_conv2d_9_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_true_3078"
      input_arg {
        name: "readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_2_sub_spectral_normalization_6_reshape_12_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_2_sub_spectral_normalization_6_batch_normalization_16_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_2_sub_spectral_normalization_6_reshape_12_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_1_cond_false_545"
      input_arg {
        name: "readvariableop_transition_block_batch_normalization_1_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_depthwise_conv2d_1_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_batch_normalization_1_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_depthwise_conv2d_1_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_spatial_dropout2d_9_cond_false_4573"
      input_arg {
        name: "identity_normal_block_6_conv2d_13_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_6_conv2d_13_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_cond_true_277"
      input_arg {
        name: "readvariableop_transition_block_batch_normalization_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_batch_normalization_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_conv2d_1_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_batch_normalization_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_batch_normalization_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_conv2d_1_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 20
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_11_batch_normalization_34_cond_1_true_7126"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_true_1195"
      input_arg {
        name: "readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_1_sub_spectral_normalization_2_reshape_4_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_1_sub_spectral_normalization_2_reshape_4_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_batch_normalization_23_cond_1_true_4941"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_7_cond_1_true_1644"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_spatial_dropout2d_3_cond_false_1976"
      input_arg {
        name: "identity_transition_block_1_conv2d_6_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_transition_block_1_conv2d_6_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_1_false_5332"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_7_cond_1_false_1645"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_9_spatial_dropout2d_13_cond_false_6345"
      input_arg {
        name: "identity_normal_block_9_conv2d_18_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_9_conv2d_18_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_spatial_dropout2d_12_cond_false_5932"
      input_arg {
        name: "identity_normal_block_8_conv2d_17_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_8_conv2d_17_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_spatial_dropout2d_8_cond_true_4159"
      input_arg {
        name: "dropout_mul_normal_block_5_conv2d_12_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_5_conv2d_12_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_batch_normalization_26_cond_false_5408"
      input_arg {
        name: "readvariableop_transition_block_3_batch_normalization_26_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_batch_normalization_26_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_26_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_26_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_depthwise_conv2d_23_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_batch_normalization_26_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_batch_normalization_26_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_batch_normalization_26_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_batch_normalization_26_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_depthwise_conv2d_23_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_true_6914"
      input_arg {
        name: "readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_11_sub_spectral_normalization_15_reshape_30_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_11_sub_spectral_normalization_15_reshape_30_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_4_batch_normalization_17_cond_true_3634"
      input_arg {
        name: "readvariableop_normal_block_4_batch_normalization_17_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_4_batch_normalization_17_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_4_batch_normalization_17_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_4_batch_normalization_17_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_4_depthwise_conv2d_15_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_4_batch_normalization_17_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_4_batch_normalization_17_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_4_batch_normalization_17_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_4_batch_normalization_17_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_4_depthwise_conv2d_15_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_spatial_dropout2d_12_cond_true_5931"
      input_arg {
        name: "dropout_mul_normal_block_8_conv2d_17_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_8_conv2d_17_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_batch_normalization_28_cond_false_5820"
      input_arg {
        name: "readvariableop_normal_block_8_batch_normalization_28_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_8_batch_normalization_28_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_8_batch_normalization_28_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_8_batch_normalization_28_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_8_depthwise_conv2d_25_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_8_batch_normalization_28_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_8_batch_normalization_28_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_8_batch_normalization_28_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_8_batch_normalization_28_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_8_depthwise_conv2d_25_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_true_802"
      input_arg {
        name: "readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_sub_spectral_normalization_1_reshape_2_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_sub_spectral_normalization_1_reshape_2_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_batch_normalization_3_cond_1_false_1005"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_1_false_479"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_1_batch_normalization_5_cond_true_1329"
      input_arg {
        name: "readvariableop_normal_block_1_batch_normalization_5_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_1_batch_normalization_5_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_1_batch_normalization_5_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_1_batch_normalization_5_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_1_depthwise_conv2d_5_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_1_batch_normalization_5_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_1_batch_normalization_5_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_1_batch_normalization_5_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_1_batch_normalization_5_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_1_depthwise_conv2d_5_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_sub_spectral_normalization_10_batch_normalization_24_cond_1_false_4798"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_false_1196"
      input_arg {
        name: "readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_1_sub_spectral_normalization_2_reshape_4_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_1_sub_spectral_normalization_2_batch_normalization_6_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_1_sub_spectral_normalization_2_reshape_4_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_true_3490"
      input_arg {
        name: "readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_4_sub_spectral_normalization_7_reshape_14_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_4_sub_spectral_normalization_7_batch_normalization_18_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_4_sub_spectral_normalization_7_reshape_14_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_1_batch_normalization_7_cond_false_1577"
      input_arg {
        name: "readvariableop_transition_block_1_batch_normalization_7_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_1_batch_normalization_7_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_7_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_7_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_1_conv2d_5_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_1_batch_normalization_7_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_1_batch_normalization_7_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_1_batch_normalization_7_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_1_batch_normalization_7_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_1_conv2d_5_conv2d"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 10
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_7_batch_normalization_23_cond_1_false_4942"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_4_spatial_dropout2d_7_cond_false_3747"
      input_arg {
        name: "identity_normal_block_4_conv2d_11_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_4_conv2d_11_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_batch_normalization_19_cond_true_4047"
      input_arg {
        name: "readvariableop_normal_block_5_batch_normalization_19_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_5_batch_normalization_19_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_5_batch_normalization_19_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_5_batch_normalization_19_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_5_depthwise_conv2d_17_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_5_batch_normalization_19_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_5_batch_normalization_19_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_5_batch_normalization_19_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_5_batch_normalization_19_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_5_depthwise_conv2d_17_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_sub_spectral_normalization_batch_normalization_2_cond_false_411"
      input_arg {
        name: "readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_sub_spectral_normalization_reshape_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_sub_spectral_normalization_batch_normalization_2_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_sub_spectral_normalization_batch_normalization_2_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_sub_spectral_normalization_reshape_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_1_cond_1_true_612"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_3_spatial_dropout2d_5_cond_false_2801"
      input_arg {
        name: "identity_normal_block_3_conv2d_8_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_3_conv2d_8_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_true_5263"
      input_arg {
        name: "readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_sub_spectral_normalization_11_reshape_22_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_sub_spectral_normalization_11_reshape_22_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_1_false_3559"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_6_batch_normalization_21_cond_false_4461"
      input_arg {
        name: "readvariableop_normal_block_6_batch_normalization_21_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_6_batch_normalization_21_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_6_batch_normalization_21_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_6_batch_normalization_21_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_6_depthwise_conv2d_19_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_6_batch_normalization_21_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_6_batch_normalization_21_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_6_batch_normalization_21_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_6_batch_normalization_21_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_6_depthwise_conv2d_19_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_10_sub_spectral_normalization_14_batch_normalization_33_cond_1_false_6570"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_4_sub_spectral_normalization_7_batch_normalization_18_cond_1_true_3558"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_false_5264"
      input_arg {
        name: "readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_3_sub_spectral_normalization_11_reshape_22_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_3_sub_spectral_normalization_11_batch_normalization_27_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_3_sub_spectral_normalization_11_reshape_22_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_9_batch_normalization_30_cond_false_6233"
      input_arg {
        name: "readvariableop_normal_block_9_batch_normalization_30_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_9_batch_normalization_30_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_9_batch_normalization_30_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_9_batch_normalization_30_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_9_depthwise_conv2d_27_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_9_batch_normalization_30_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_9_batch_normalization_30_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_9_batch_normalization_30_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_9_batch_normalization_30_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_9_depthwise_conv2d_27_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_3_batch_normalization_12_cond_false_2689"
      input_arg {
        name: "readvariableop_normal_block_3_batch_normalization_12_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_3_batch_normalization_12_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_3_batch_normalization_12_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_3_batch_normalization_12_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_3_depthwise_conv2d_11_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_3_batch_normalization_12_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_3_batch_normalization_12_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_3_batch_normalization_12_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_3_batch_normalization_12_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_3_depthwise_conv2d_11_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_spatial_dropout2d_9_cond_true_4572"
      input_arg {
        name: "dropout_mul_normal_block_6_conv2d_13_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_6_conv2d_13_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_1_false_5744"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_false_6915"
      input_arg {
        name: "readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_11_sub_spectral_normalization_15_reshape_30_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_11_sub_spectral_normalization_15_batch_normalization_35_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_11_sub_spectral_normalization_15_reshape_30_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_spatial_dropout2d_11_cond_true_5519"
      input_arg {
        name: "dropout_mul_transition_block_3_conv2d_16_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_transition_block_3_conv2d_16_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_8_sub_spectral_normalization_12_batch_normalization_29_cond_false_5676"
      input_arg {
        name: "readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_8_sub_spectral_normalization_12_reshape_24_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_8_sub_spectral_normalization_12_batch_normalization_29_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_8_sub_spectral_normalization_12_reshape_24_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 100
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_11_spatial_dropout2d_15_cond_true_7170"
      input_arg {
        name: "dropout_mul_normal_block_11_conv2d_20_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\024\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_11_conv2d_20_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_1_cond_1_false_613"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_1_true_1263"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_batch_normalization_10_cond_1_true_2343"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_1_sub_spectral_normalization_3_batch_normalization_9_cond_1_true_1787"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_spatial_dropout2d_4_cond_true_2387"
      input_arg {
        name: "dropout_mul_normal_block_2_conv2d_7_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\014\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_2_conv2d_7_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_14_cond_1_true_3003"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_sub_spectral_normalization_1_batch_normalization_4_cond_false_803"
      input_arg {
        name: "readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_sub_spectral_normalization_1_reshape_2_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_sub_spectral_normalization_1_batch_normalization_4_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_sub_spectral_normalization_1_reshape_2_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 4
                }
                dim {
                  size: 40
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_true_3903"
      input_arg {
        name: "readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_5_sub_spectral_normalization_8_reshape_16_reshape"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_5_sub_spectral_normalization_8_batch_normalization_20_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_5_sub_spectral_normalization_8_reshape_16_reshape"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 80
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_batch_normalization_15_cond_1_false_3291"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_1_false_6983"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_spatial_dropout2d_1_cond_true_1048"
      input_arg {
        name: "dropout_mul_normal_block_conv2d_3_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\010\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_normal_block_conv2d_3_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_2_sub_spectral_normalization_4_batch_normalization_11_cond_1_true_2199"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_8_batch_normalization_28_cond_1_false_5888"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_3_sub_spectral_normalization_5_batch_normalization_13_cond_1_true_2612"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_5_sub_spectral_normalization_8_batch_normalization_20_cond_1_false_3972"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_11_sub_spectral_normalization_15_batch_normalization_35_cond_1_true_6982"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_batch_normalization_10_cond_1_false_2344"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_batch_normalization_1_cond_true_544"
      input_arg {
        name: "readvariableop_transition_block_batch_normalization_1_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_transition_block_batch_normalization_1_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_1_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_1_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_transition_block_depthwise_conv2d_1_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_transition_block_batch_normalization_1_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_transition_block_batch_normalization_1_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_transition_block_batch_normalization_1_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_transition_block_batch_normalization_1_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_transition_block_depthwise_conv2d_1_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_1_sub_spectral_normalization_2_batch_normalization_6_cond_1_false_1264"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_10_spatial_dropout2d_14_cond_false_6758"
      input_arg {
        name: "identity_normal_block_10_conv2d_19_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone_17"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_normal_block_10_conv2d_19_conv2d"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_1"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_2"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_3"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_4"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_5"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_6"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_7"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_8"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_9"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_10"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_11"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_12"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_13"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_14"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_15"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_16"
      op: "OptionalNone"
    }
    node_def {
      name: "OptionalNone_17"
      op: "OptionalNone"
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    ret {
      key: "optionalnone_1"
      value: "OptionalNone_1:optional:0"
    }
    ret {
      key: "optionalnone_10"
      value: "OptionalNone_10:optional:0"
    }
    ret {
      key: "optionalnone_11"
      value: "OptionalNone_11:optional:0"
    }
    ret {
      key: "optionalnone_12"
      value: "OptionalNone_12:optional:0"
    }
    ret {
      key: "optionalnone_13"
      value: "OptionalNone_13:optional:0"
    }
    ret {
      key: "optionalnone_14"
      value: "OptionalNone_14:optional:0"
    }
    ret {
      key: "optionalnone_15"
      value: "OptionalNone_15:optional:0"
    }
    ret {
      key: "optionalnone_16"
      value: "OptionalNone_16:optional:0"
    }
    ret {
      key: "optionalnone_17"
      value: "OptionalNone_17:optional:0"
    }
    ret {
      key: "optionalnone_2"
      value: "OptionalNone_2:optional:0"
    }
    ret {
      key: "optionalnone_3"
      value: "OptionalNone_3:optional:0"
    }
    ret {
      key: "optionalnone_4"
      value: "OptionalNone_4:optional:0"
    }
    ret {
      key: "optionalnone_5"
      value: "OptionalNone_5:optional:0"
    }
    ret {
      key: "optionalnone_6"
      value: "OptionalNone_6:optional:0"
    }
    ret {
      key: "optionalnone_7"
      value: "OptionalNone_7:optional:0"
    }
    ret {
      key: "optionalnone_8"
      value: "OptionalNone_8:optional:0"
    }
    ret {
      key: "optionalnone_9"
      value: "OptionalNone_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 20
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_batch_normalization_3_cond_false_937"
      input_arg {
        name: "readvariableop_normal_block_batch_normalization_3_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_batch_normalization_3_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_batch_normalization_3_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_batch_normalization_3_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_depthwise_conv2d_3_depthwise"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_batch_normalization_3_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_batch_normalization_3_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_batch_normalization_3_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_batch_normalization_3_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_depthwise_conv2d_3_depthwise"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 8
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_2_sub_spectral_normalization_6_batch_normalization_16_cond_1_true_3146"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "transition_block_2_spatial_dropout2d_6_cond_true_3334"
      input_arg {
        name: "dropout_mul_transition_block_2_conv2d_10_conv2d"
        type: DT_FLOAT
      }
      output_arg {
        name: "dropout_selectv2"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_7"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_8"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_9"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_10"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_11"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_12"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_13"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_14"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_15"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_16"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_17"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "Shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "d\000\000\000b\000\000\000\001\000\000\000\020\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape:output:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "dropout/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.1111111640930176
          }
        }
      }
    }
    node_def {
      name: "dropout/Mul"
      op: "Mul"
      input: "dropout_mul_transition_block_2_conv2d_10_conv2d"
      input: "dropout/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape/2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/shape"
      op: "Pack"
      input: "strided_slice:output:0"
      input: "dropout/random_uniform/shape/1:output:0"
      input: "dropout/random_uniform/shape/2:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node_def {
      name: "dropout/GreaterEqual"
      op: "GreaterEqual"
      input: "dropout/random_uniform/RandomUniform:output:0"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "dropout/Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "dropout/SelectV2"
      op: "SelectV2"
      input: "dropout/GreaterEqual:z:0"
      input: "dropout/Mul:z:0"
      input: "dropout/Const_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "Shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "strided_slice/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "strided_slice/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "strided_slice:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_7"
      op: "OptionalFromValue"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_8"
      op: "OptionalFromValue"
      input: "strided_slice_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_9"
      op: "OptionalFromValue"
      input: "dropout/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_10"
      op: "OptionalFromValue"
      input: "dropout/Mul:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_11"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_12"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape/2:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_13"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/shape:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_INT32
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_14"
      op: "OptionalFromValue"
      input: "dropout/random_uniform/RandomUniform:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_15"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual/y:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_16"
      op: "OptionalFromValue"
      input: "dropout/GreaterEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_BOOL
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_17"
      op: "OptionalFromValue"
      input: "dropout/Const_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "dropout_selectv2"
      value: "dropout/SelectV2:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_10"
      value: "OptionalFromValue_10:optional:0"
    }
    ret {
      key: "optionalfromvalue_11"
      value: "OptionalFromValue_11:optional:0"
    }
    ret {
      key: "optionalfromvalue_12"
      value: "OptionalFromValue_12:optional:0"
    }
    ret {
      key: "optionalfromvalue_13"
      value: "OptionalFromValue_13:optional:0"
    }
    ret {
      key: "optionalfromvalue_14"
      value: "OptionalFromValue_14:optional:0"
    }
    ret {
      key: "optionalfromvalue_15"
      value: "OptionalFromValue_15:optional:0"
    }
    ret {
      key: "optionalfromvalue_16"
      value: "OptionalFromValue_16:optional:0"
    }
    ret {
      key: "optionalfromvalue_17"
      value: "OptionalFromValue_17:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    ret {
      key: "optionalfromvalue_7"
      value: "OptionalFromValue_7:optional:0"
    }
    ret {
      key: "optionalfromvalue_8"
      value: "OptionalFromValue_8:optional:0"
    }
    ret {
      key: "optionalfromvalue_9"
      value: "OptionalFromValue_9:optional:0"
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "transition_block_3_sub_spectral_normalization_11_batch_normalization_27_cond_1_true_5331"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9900000095367432
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
  function {
    signature {
      name: "normal_block_2_batch_normalization_10_cond_true_2275"
      input_arg {
        name: "readvariableop_normal_block_2_batch_normalization_10_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_2_batch_normalization_10_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_2_batch_normalization_10_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_2_batch_normalization_10_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_2_depthwise_conv2d_9_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_2_batch_normalization_10_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_2_batch_normalization_10_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_2_batch_normalization_10_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_2_batch_normalization_10_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_2_depthwise_conv2d_9_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 12
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_batch_normalization_21_cond_true_4460"
      input_arg {
        name: "readvariableop_normal_block_6_batch_normalization_21_gamma"
        type: DT_RESOURCE
      }
      input_arg {
        name: "readvariableop_1_normal_block_6_batch_normalization_21_beta"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_normal_block_6_batch_normalization_21_moving_mean"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_readvariableop_1_normal_block_6_batch_normalization_21_moving_variance"
        type: DT_RESOURCE
      }
      input_arg {
        name: "fusedbatchnormv3_normal_block_6_depthwise_conv2d_19_depthwise_batchtospacend"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "fusedbatchnormv3_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_5"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_6"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "readvariableop_normal_block_6_batch_normalization_21_gamma"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "readvariableop_1_normal_block_6_batch_normalization_21_beta"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_normal_block_6_batch_normalization_21_moving_mean"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "fusedbatchnormv3_readvariableop_1_normal_block_6_batch_normalization_21_moving_variance"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "FusedBatchNormV3"
      op: "FusedBatchNormV3"
      input: "fusedbatchnormv3_normal_block_6_depthwise_conv2d_19_depthwise_batchtospacend"
      input: "ReadVariableOp:value:0"
      input: "ReadVariableOp_1:value:0"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "U"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
      attr {
        key: "epsilon"
        value {
          f: 0.0010000000474974513
        }
      }
      attr {
        key: "exponential_avg_factor"
        value {
          f: 1.0
        }
      }
      attr {
        key: "is_training"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3/ReadVariableOp_1:value:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_1:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_5"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_2:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    node_def {
      name: "OptionalFromValue_6"
      op: "OptionalFromValue"
      input: "FusedBatchNormV3:reserve_space_3:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      experimental_type {
        type_id: TFT_PRODUCT
        args {
          type_id: TFT_OPTIONAL
          args {
            type_id: TFT_PRODUCT
            args {
              type_id: TFT_TENSOR
              args {
                type_id: TFT_FLOAT
              }
            }
          }
        }
      }
    }
    ret {
      key: "fusedbatchnormv3"
      value: "FusedBatchNormV3:y:0"
    }
    ret {
      key: "fusedbatchnormv3_0"
      value: "FusedBatchNormV3:batch_mean:0"
    }
    ret {
      key: "fusedbatchnormv3_1"
      value: "FusedBatchNormV3:batch_variance:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    ret {
      key: "optionalfromvalue_5"
      value: "OptionalFromValue_5:optional:0"
    }
    ret {
      key: "optionalfromvalue_6"
      value: "OptionalFromValue_6:optional:0"
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 98
                }
                dim {
                  size: 1
                }
                dim {
                  size: 16
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "normal_block_6_batch_normalization_21_cond_1_false_4529"
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
}
versions {
  producer: 1286
  min_consumer: 12
}
